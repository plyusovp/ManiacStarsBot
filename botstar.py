# botstar.py
import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.base import StorageKey
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import settings
from database import db
from handlers import (
    admin_handlers,
    duel_handlers,
    game_handlers,
    menu_handler,
    timer_handlers,
    user_handlers,
)
from middlewares.middlewares import LastSeenMiddleware

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def cleanup_active_games():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ '–∑–æ–º–±–∏-–∏–≥—Ä—ã' –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    active_duels = await db.get_all_active_duels()
    if active_duels:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(active_duels)} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π. –û—á–∏—Å—Ç–∫–∞...")
        for match_id in active_duels:
            await db.interrupt_duel(match_id)
        print("–û—á–∏—Å—Ç–∫–∞ –¥—É—ç–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    active_timers = await db.get_all_active_timers()
    if active_timers:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(active_timers)} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –û—á–∏—Å—Ç–∫–∞...")
        for match_id in active_timers:
            await db.interrupt_timer_match(match_id)
        print("–û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def send_bonus_reminders(bot: Bot):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –±–æ–Ω—É—Å–µ."""
    users_to_notify = await db.get_users_for_notification()
    if not users_to_notify:
        return

    print(
        f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–æ–Ω—É—Å–µ –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    )
    sent_count = 0
    for user_id in users_to_notify:
        try:
            await bot.send_message(
                user_id,
                "‚è∞ –≠–π! –¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ –∑–∞–±—É–¥—å –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ üòâ",
            )
            sent_count += 1
            await asyncio.sleep(0.1)
        except Exception:
            pass
    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {sent_count}.")


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ "–∑–∞–≤–∏—Å—à–∏—Ö" —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM ---
async def diagnose_stuck_states(dp: Dispatcher, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM."""
    all_users = await db.get_all_users()
    if not all_users:
        return

    stuck_users_count = 0
    for user_id in all_users:
        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
        state = await dp.fsm.storage.get_state(key=storage_key)
        if state is not None:
            stuck_users_count += 1
            logger.warning(f"FSM DIAGNOSTICS: User {user_id} is in state '{state}'")

    if stuck_users_count > 0:
        logger.warning(
            f"FSM DIAGNOSTICS: Total users in FSM state: {stuck_users_count}"
        )


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ë–æ—Ç–∞ –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    dp.update.middleware.register(LastSeenMiddleware())

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä...")
    await cleanup_active_games()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_bonus_reminders, "interval", hours=2, args=(bot,))
    scheduler.add_job(db.cleanup_old_idempotency_keys, "interval", days=1)
    # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ FSM ---
    scheduler.add_job(
        diagnose_stuck_states, "interval", minutes=15, args=(dp, bot)
    )
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ—á–∏—Å—Ç–∫–∏ –∫–ª—é—á–µ–π –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ FSM –∑–∞–ø—É—â–µ–Ω.")

    # --- –ì–õ–ê–í–ù–û–ï: –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ handlers ---
    dp.include_router(admin_handlers.router)
    dp.include_router(duel_handlers.router)
    dp.include_router(timer_handlers.router)
    dp.include_router(game_handlers.router)
    dp.include_router(menu_handler.router)
    dp.include_router(
        user_handlers.router
    )  # –≠—Ç–æ—Ç —Ä–æ—É—Ç–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å" –∏ /start

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
