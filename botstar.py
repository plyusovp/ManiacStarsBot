# bot.py
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import BOT_TOKEN
import database.db as db
from handlers import (
    user_handlers, 
    admin_handlers, 
    game_handlers, 
    menu_handler, 
    duel_handlers, 
    timer_handlers
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

async def cleanup_active_duels():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ '–∑–æ–º–±–∏-–¥—É—ç–ª–∏' –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    active_duels = await db.get_all_active_duels()
    if active_duels:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(active_duels)} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π. –û—á–∏—Å—Ç–∫–∞...")
        for match_id in active_duels:
            await db.interrupt_duel(match_id)
        print("–û—á–∏—Å—Ç–∫–∞ –¥—É—ç–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def cleanup_active_timers():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ '–∑–æ–º–±–∏-—Ç–∞–π–º–µ—Ä—ã' –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    active_timers = await db.get_all_active_timers()
    if active_timers:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(active_timers)} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –û—á–∏—Å—Ç–∫–∞...")
        for match_id in active_timers:
            await db.interrupt_timer_match(match_id)
        print("–û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def run_compensation(bot: Bot):
    """–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏."""
    flag_file = 'compensation_sent.flag'
    if not os.path.exists(flag_file):
        print("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏...")
        all_users = await db.get_all_users()
        message_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ üòî\n\n–û—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, –∏ –≤—Å–µ–º –≤—ã–¥–∞–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è <b>+2 ‚≠ê</b>.\n\n(–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ä–∞–Ω–µ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º). –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
        
        success_count = 0
        fail_count = 0
        for user_id in all_users:
            try:
                await db.add_stars(user_id, 2)
                await bot.send_message(user_id, message_text)
                await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram
                success_count += 1
            except Exception as e:
                fail_count += 1
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        with open(flag_file, 'w') as f:
            f.write('done')
        print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–∫–∏: {fail_count}.")
    else:
        print("–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∞—é...")

async def send_bonus_reminders(bot: Bot):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –±–æ–Ω—É—Å–µ."""
    users_to_notify = await db.get_users_for_notification()
    if not users_to_notify:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ.")
        return

    print(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–æ–Ω—É—Å–µ –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    sent_count = 0
    for user_id in users_to_notify:
        try:
            await bot.send_message(user_id, "‚è∞ –≠–π! –¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ –∑–∞–±—É–¥—å –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /bonus üòâ")
            sent_count += 1
            await asyncio.sleep(0.1)
        except Exception:
            pass 
    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {sent_count}.")


async def main():
    await db.init_db()
    
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä...")
    await cleanup_active_duels()
    await cleanup_active_timers()
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏...")
    await run_compensation(bot)

    # –ó–ê–ü–£–°–ö–ê–ï–ú –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_bonus_reminders, 'interval', hours=2, args=(bot,))
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–æ–Ω—É—Å–µ –∑–∞–ø—É—â–µ–Ω.")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
    dp.include_router(admin_handlers.router)
    dp.include_router(duel_handlers.router)
    dp.include_router(timer_handlers.router)
    dp.include_router(game_handlers.router)
    dp.include_router(menu_handler.router)
    dp.include_router(user_handlers.router)
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())