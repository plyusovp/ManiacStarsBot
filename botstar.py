# botstar.py
import asyncio
import logging
from contextlib import suppress

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import settings
from database import db
from handlers import (
    admin_handlers,
    duel_handlers,
    game_handlers,
    menu_handler,
    timer_handlers,
    user_handlers,
)
from keyboards.reply import persistent_menu_keyboard
from logger_config import setup_logging
from middlewares.error_handler import ErrorHandler
from middlewares.metrics import MetricsMiddleware
from middlewares.middlewares import LastSeenMiddleware
from middlewares.throttling import ThrottlingMiddleware
from middlewares.tracing import TracingMiddleware


async def cleanup_active_games():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ '–∑–æ–º–±–∏-–∏–≥—Ä—ã' –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    active_duels = await db.get_all_active_duels()
    if active_duels:
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(active_duels)} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π. –û—á–∏—Å—Ç–∫–∞...")
        for match_id in active_duels:
            await db.interrupt_duel(match_id)
        logging.info("–û—á–∏—Å—Ç–∫–∞ –¥—É—ç–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    active_timers = await db.get_all_active_timers()
    if active_timers:
        logging.info(
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(active_timers)} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –û—á–∏—Å—Ç–∫–∞..."
        )
        for match_id in active_timers:
            await db.interrupt_timer_match(match_id)
        logging.info("–û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def send_bonus_reminders(bot: Bot):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –±–æ–Ω—É—Å–µ."""
    users_to_notify = await db.get_users_for_notification()
    if not users_to_notify:
        return

    logging.info(
        f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–æ–Ω—É—Å–µ –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    )
    sent_count = 0
    for user_id in users_to_notify:
        with suppress(Exception):  # Safely ignore users who blocked the bot
            await bot.send_message(
                user_id,
                "‚è∞ –≠–π! –¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–±–µ—Ä–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /bonus",
                reply_markup=persistent_menu_keyboard(),
            )
            sent_count += 1
            await asyncio.sleep(0.1)  # Rate limit
    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {sent_count}.")


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è FSM, —Ç.–∫. —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    storage = MemoryStorage()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ë–æ—Ç–∞ –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher(storage=storage)

    # --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø MIDDLEWARES ---
    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω:
    # 1. TracingMiddleware - —Å–æ–∑–¥–∞–µ—Ç trace_id –∏ user_id –≤ data
    # 2. ErrorHandler - –ª–æ–≤–∏—Ç –æ—à–∏–±–∫–∏ –æ—Ç –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª–æ–µ–≤
    # 3. MetricsMiddleware - —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
    # 4. ThrottlingMiddleware - –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
    # 5. LastSeenMiddleware - –æ–±–Ω–æ–≤–ª—è–µ—Ç last_seen
    dp.update.middleware.register(TracingMiddleware())
    dp.update.middleware.register(ErrorHandler())
    dp.update.middleware.register(MetricsMiddleware())
    dp.update.middleware.register(
        ThrottlingMiddleware(rate_limit=settings.THROTTLING_RATE_LIMIT)
    )
    dp.update.middleware.register(LastSeenMiddleware())

    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä...")
    await cleanup_active_games()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_bonus_reminders, "interval", hours=2, args=(bot,))
    scheduler.add_job(db.cleanup_old_idempotency_keys, "interval", days=1)
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∏ –∫–ª—é—á–µ–π –∑–∞–ø—É—â–µ–Ω.")

    # --- –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ handlers ---
    # –í–∞–∂–Ω–æ: –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (admin) –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —Ä–∞–Ω—å—à–µ –æ–±—â–∏—Ö (user)
    dp.include_router(admin_handlers.router)
    dp.include_router(duel_handlers.router)
    dp.include_router(timer_handlers.router)
    dp.include_router(game_handlers.router)
    dp.include_router(menu_handler.router)
    dp.include_router(user_handlers.router)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é (–∫–æ–º–∞–Ω–¥—ã) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(
        [
            {"command": "start", "description": "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
            {"command": "menu", "description": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
            {"command": "bonus", "description": "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"},
        ]
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
