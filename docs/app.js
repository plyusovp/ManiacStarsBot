// --- –≠–∫—Ä–∞–Ω—ã ---
import * as taper from './ui/components/screens/taper.js';
import * as games from './ui/components/screens/games.js';
import * as referrals from './ui/components/screens/referrals.js';
import * as profile from './ui/components/screens/profile.js';
import * as settings from './ui/components/screens/settings.js';

// --- –Ø–¥—Ä–æ ---
import { getBalance, fmt, isFirstLaunch, setVisited } from './core/state.js';
import * as audio from './core/audio.js';
import { hapticFeedback } from './core/utils.js';
import * as particles from './core/particles.js';
import { isLowPerfDevice } from './core/performance.js';
import * as i18n from './core/i18n.js';
import * as effects from './core/effects.js';

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const routes = {
    '/taper': taper,
    '/games': games,
    '/referrals': referrals,
    '/profile': profile,
    '/settings': settings,
};

let currentView = null;
let tg;

// --- DOM-—ç–ª–µ–º–µ–Ω—Ç—ã ---
const DOMElements = {
    app: document.getElementById('app'),
    splash: document.getElementById('splash-screen'),
    headerTitle: document.getElementById('header-title'),
    balanceValue: document.getElementById('balance-value'),
    mainContent: document.getElementById('main-content'),
    navContainer: document.getElementById('bottom-nav'),
    particleCanvas: document.getElementById('particle-canvas'),
};

const updateBalanceDisplay = () => {
    DOMElements.balanceValue.textContent = fmt(getBalance());
};

// --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
async function navigateTo(path) {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å –∫ –∏–≥—Ä–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    if (path.startsWith('/game/')) {
        const gameId = path.split('/')[2];
        try {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –∫–æ–¥ –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω –Ω—É–∂–µ–Ω
            const gameModule = await import(`./games/${gameId}.js`);
            mountView(gameModule, path);
        } catch (e) {
            console.error(`Failed to load game module: ${gameId}`, e);
            navigateTo('/games'); // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä
        }
    } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
        mountView(routes[path] || routes['/taper'], path);
    }
}

function mountView(viewModule, path) {
    if (currentView && currentView.unmount) {
        currentView.unmount();
    }

    currentView = viewModule;
    currentView.path = path; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å

    const title = viewModule.titleKey ? i18n.t(viewModule.titleKey) : (viewModule.title || '');
    DOMElements.headerTitle.textContent = title;
    DOMElements.mainContent.innerHTML = '';
    DOMElements.mainContent.className = 'main-content view';
    currentView.mount(DOMElements.mainContent);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–∫–æ–Ω–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-item').forEach(item => {
        const itemPath = item.dataset.path;
        item.classList.toggle('active', itemPath === path || (path.startsWith('/game') && itemPath === '/games'));
    });
}

async function changeLanguage(lang) {
    i18n.setLanguage(lang);
    generateNavigation(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    if (currentView) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã
        navigateTo(currentView.path);
    }
}

// --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò ---
function generateNavigation() {
    const navItems = [
        { path: '/taper', icon: 'star', labelKey: 'nav_main' },
        { path: '/games', icon: 'gamepad-2', labelKey: 'nav_games' },
        { path: '/referrals', icon: 'users', labelKey: 'nav_friends' },
        { path: '/profile', icon: 'user', labelKey: 'nav_profile' },
        { path: '/settings', icon: 'sliders-horizontal', labelKey: 'nav_settings' },
    ];
    // –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∏–∫–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ SVG, –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    const icons = { 'star': '‚≠ê', 'gamepad-2': 'üéÆ', 'users': 'üë•', 'user': 'üë§', 'sliders-horizontal': '‚öôÔ∏è' };

    DOMElements.navContainer.innerHTML = navItems.map(item => `
        <a href="#" data-path="${item.path}" class="nav-item">
            <div style="font-size: 24px;">${icons[item.icon]}</div>
            <span>${i18n.t(item.labelKey)}</span>
        </a>
    `).join('');
    bindNavEventListeners();
}

function bindNavEventListeners() {
    DOMElements.navContainer.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            navigateTo(item.dataset.path);
            hapticFeedback('light');
        });
    });
}

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
const initApp = async () => {
     try {
        await i18n.init();

        try {
            tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();
        } catch (e) {
            console.warn("Telegram WebApp API not found. Running in dev mode.");
        }

        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        window.ManiacGames = {
            updateBalance: updateBalanceDisplay,
            navigateTo,
            hapticFeedback,
            t: i18n.t,
            changeLanguage,
            // ... –¥—Ä—É–≥–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
        };

        // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–ª—ç—à-—Å–∫—Ä–∏–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        DOMElements.splash.style.opacity = '0';
        DOMElements.app.classList.remove('hidden');
        DOMElements.splash.addEventListener('transitionend', () => DOMElements.splash.remove());

        generateNavigation();
        updateBalanceDisplay();
        navigateTo('/taper'); // –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω

     } catch (e) {
        console.error("Critical error during app initialization:", e);
        document.body.innerHTML = `<div style="color:white; padding:20px;"><h3>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h3><p>${e.message}</p><pre>${e.stack}</pre></div>`;
    }
 };

document.addEventListener('DOMContentLoaded', initApp);
