"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±–æ—Ç–∞.
"""

import asyncio
import hmac
import hashlib
import json
from typing import Dict, Any

from api_withdrawal import create_app_withdrawal_api, get_app_withdrawal_status


async def test_withdrawal_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±–æ—Ç–∞")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = 123456789
    amount = 100
    app_transaction_id = "test_tx_001"
    secret_key = "test_secret_key_123"
    
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:")
    print(f"   User ID: {user_id}")
    print(f"   Amount: {amount} ‚≠ê")
    print(f"   App Transaction ID: {app_transaction_id}")
    print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    message = f"{user_id}:{amount}:{app_transaction_id}"
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    
    print(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature}")
    print()
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    print("1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏...")
    result = await create_app_withdrawal_api(
        user_id=user_id,
        amount=amount,
        app_transaction_id=app_transaction_id,
        signature=signature,
        secret_key=secret_key,
        notes="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
    )
    
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
    
    if result["success"]:
        withdrawal_id = result["withdrawal_id"]
        print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {withdrawal_id}")
        print()
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        print("2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏...")
        status_result = await get_app_withdrawal_status(withdrawal_id)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(status_result, ensure_ascii=False, indent=2)}")
        
        if status_result["success"]:
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status_result['status']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_result['message']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {result['message']}")
    
    print()
    print("=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def test_error_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ—à–∏–±–æ–∫."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–æ–∫")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
    print("1Ô∏è‚É£ –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é...")
    result = await create_app_withdrawal_api(
        user_id=123456789,
        amount=100,
        app_transaction_id="test_tx_002",
        signature="invalid_signature",
        secret_key="test_secret_key_123",
        notes="–¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é"
    )
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º–æ–π
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º–æ–π...")
    result = await create_app_withdrawal_api(
        user_id=123456789,
        amount=-50,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
        app_transaction_id="test_tx_003",
        signature="valid_signature",
        secret_key="test_secret_key_123",
        notes="–¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π"
    )
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
    
    # –¢–µ—Å—Ç —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è app_transaction_id
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è app_transaction_id...")
    message = f"123456789:100:test_tx_001"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
    signature = hmac.new(
        "test_secret_key_123".encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    
    result = await create_app_withdrawal_api(
        user_id=123456789,
        amount=100,
        app_transaction_id="test_tx_001",  # –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID
        signature=signature,
        secret_key="test_secret_key_123",
        notes="–¢–µ—Å—Ç —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è ID"
    )
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    try:
        await test_withdrawal_system()
        await test_error_cases()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥")
    print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(main())
