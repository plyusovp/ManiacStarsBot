# keyboards/inline.py
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder


def main_reply_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ú–µ–Ω—é'."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ú–µ–Ω—é")]],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ '–ú–µ–Ω—é', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...",
    )


def main_menu():
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ö–ª–µ–± ‚≠ê", callback_data="earn"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üëæ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="entertainment_menu"
                ),
                InlineKeyboardButton(text="ü™™ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            ],
            [
                InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw"),
                InlineKeyboardButton(text="üìà –¢–æ–ø", callback_data="top"),
            ],
            [
                InlineKeyboardButton(
                    text="üì∞ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/+Hu5bVLrGpRpiMTBk"
                ),
                InlineKeyboardButton(
                    text="üòç –ù–∞—à–∏ –≤—ã–≤–æ–¥—ã", url="https://t.me/+234P6hHN4YEwMDE8"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚òéÔ∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/m/0gHWD35HYTZk"
                )
            ],
        ]
    )


def earn_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å' —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéüÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_code"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )


def entertainment_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_menu"
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü™ô –û—Ä—ë–ª –∏ –†–µ—à–∫–∞", callback_data="game_coinflip"
                )
            ],
            [InlineKeyboardButton(text="‚ö° –î—É—ç–ª–∏ 1x1", callback_data="game_duel")],
            [
                InlineKeyboardButton(
                    text="‚è≥ –ó–≤—ë–∑–¥–Ω—ã–π –¢–∞–π–º–µ—Ä", callback_data="game_timer"
                )
            ],
            [InlineKeyboardButton(text="üé∞ –ö–∞–∑–∏–∫", callback_data="game_casino")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )


def duel_stake_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ –¥—É—ç–ª–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="10 ‚≠ê", callback_data="duel_stake:10"),
                InlineKeyboardButton(text="25 ‚≠ê", callback_data="duel_stake:25"),
                InlineKeyboardButton(text="50 ‚≠ê", callback_data="duel_stake:50"),
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="duel_rules"),
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment_menu"
                ),
            ],
        ]
    )


def duel_searching_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –¥—É—ç–ª–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="duel_cancel_search"
                )
            ]
        ]
    )


def duel_stuck_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç—Ä—è–ª –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è –∏ –≤—ã–π—Ç–∏ (–ø–æ—Ä–∞–∂–µ–Ω–∏–µ)",
                    callback_data="duel_leave_active",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="entertainment_menu"
                )
            ],
        ]
    )


def duel_round_keyboard(hand: list, match_id: int, boosts_left: int, replace_left: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    builder = InlineKeyboardBuilder()

    card_buttons = []
    for card in sorted(hand, key=lambda x: x[0] if isinstance(x, tuple) else x):
        card_value, original_value = (card, card)
        if isinstance(card, tuple):
            card_value, original_value = card

        card_text = f"üÉè {card_value}"
        if card_value != original_value:
            card_text += f" (+{card_value - original_value})"

        card_buttons.append(
            InlineKeyboardButton(
                text=card_text,
                callback_data=f"duel_play:{match_id}:{card_value}:{original_value}",
            )
        )
    builder.row(*card_buttons)

    action_buttons = []
    if boosts_left > 0:
        action_buttons.append(
            InlineKeyboardButton(
                text=f"‚ö° –£—Å–∏–ª–∏—Ç—å ({boosts_left})",
                callback_data=f"duel_boost:{match_id}",
            )
        )
    if replace_left > 0:
        action_buttons.append(
            InlineKeyboardButton(
                text=f"üîÑ –ó–∞–º–µ–Ω–∏—Ç—å ({replace_left})",
                callback_data=f"duel_replace:{match_id}",
            )
        )

    if action_buttons:
        builder.row(*action_buttons)

    builder.row(
        InlineKeyboardButton(
            text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data=f"duel_surrender:{match_id}"
        )
    )

    return builder.as_markup()


def duel_boost_choice_keyboard(hand: list, match_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å."""
    builder = InlineKeyboardBuilder()
    buttons = []
    for card in sorted(hand, key=lambda x: x[0] if isinstance(x, tuple) else x):
        card_value = card[0] if isinstance(card, tuple) else card
        buttons.append(
            InlineKeyboardButton(
                text=f"‚ö° {card_value}",
                callback_data=f"duel_boost_choice:{match_id}:{card_value}",
            )
        )
    builder.row(*buttons)
    builder.row(
        InlineKeyboardButton(
            text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"duel_cancel_action:{match_id}"
        )
    )
    return builder.as_markup()


def duel_replace_choice_keyboard(hand: list, match_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å."""
    builder = InlineKeyboardBuilder()
    buttons = []
    for card in sorted(hand, key=lambda x: x[0] if isinstance(x, tuple) else x):
        card_value = card[0] if isinstance(card, tuple) else card
        buttons.append(
            InlineKeyboardButton(
                text=f"üîÑ {card_value}",
                callback_data=f"duel_replace_choice:{match_id}:{card_value}",
            )
        )
    builder.row(*buttons)
    builder.row(
        InlineKeyboardButton(
            text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"duel_cancel_action:{match_id}"
        )
    )
    return builder.as_markup()


def duel_surrender_confirm_keyboard(match_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–∞—á–∏ –≤ –¥—É—ç–ª–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —Å–¥–∞—Ç—å—Å—è",
                    callback_data=f"duel_surrender_confirm:{match_id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –≤ –±–æ–π!",
                    callback_data=f"duel_cancel_action:{match_id}",
                ),
            ]
        ]
    )


def duel_finish_keyboard(match_id: int, opponent_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –º–∞—Ç—á–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÅ –†–µ–≤–∞–Ω—à",
                    callback_data=f"duel_rematch:{match_id}:{opponent_id}",
                )
            ],
            [InlineKeyboardButton(text="üè† –í –ª–æ–±–±–∏ –¥—É—ç–ª–µ–π", callback_data="game_duel")],
        ]
    )


def timer_stake_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ '–ó–≤—ë–∑–¥–Ω–æ–º —Ç–∞–π–º–µ—Ä–µ'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="5 ‚≠ê", callback_data="timer_stake:5"),
                InlineKeyboardButton(text="10 ‚≠ê", callback_data="timer_stake:10"),
                InlineKeyboardButton(text="25 ‚≠ê", callback_data="timer_stake:25"),
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="entertainment_menu"
                )
            ],
        ]
    )


def timer_game_keyboard(match_id: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –≤ '–ó–≤—ë–∑–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ö° –ó–ê–ë–†–ê–¢–¨ –ë–ê–ù–ö ‚ö°", callback_data=f"timer_play:{match_id}"
                )
            ]
        ]
    )


def timer_finish_keyboard(match_id: int, opponent_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ '–ó–≤—ë–∑–¥–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÅ –†–µ–≤–∞–Ω—à",
                    callback_data=f"timer_rematch:{match_id}:{opponent_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –í –ª–æ–±–±–∏ —Ç–∞–π–º–µ—Ä–∞", callback_data="game_timer"
                )
            ],
        ]
    )


def timer_stuck_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç—Ä—è–ª –≤ '–ó–≤—ë–∑–¥–Ω–æ–º —Ç–∞–π–º–µ—Ä–µ'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É", callback_data="timer_leave_active"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="entertainment_menu"
                )
            ],
        ]
    )


def coinflip_bet_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ '–û—Ä—ë–ª –∏ –†–µ—à–∫–∞'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="1 ‚≠ê", callback_data="coinflip_bet:1"),
                InlineKeyboardButton(text="5 ‚≠ê", callback_data="coinflip_bet:5"),
                InlineKeyboardButton(text="10 ‚≠ê", callback_data="coinflip_bet:10"),
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="entertainment_menu")],
        ]
    )


def coinflip_choice_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–Ω–µ—Ç—ã (—É–∂–µ –±–µ–∑ —Å—Ç–∞–≤–∫–∏)."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="ü¶Ö –û—Ä—ë–ª", callback_data="coinflip_play:heads"
                ),
                InlineKeyboardButton(
                    text="ü™ô –†–µ—à–∫–∞", callback_data="coinflip_play:tails"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üîô –û—Ç–º–µ–Ω–∞", callback_data="game_coinflip_cancel"
                )
            ],
        ]
    )


def coinflip_continue_keyboard(prize: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞: –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –∏–ª–∏ —Ä–∏—Å–∫–Ω—É—Ç—å."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚úÖ –ó–∞–±—Ä–∞—Ç—å {prize} ‚≠ê", callback_data="coinflip_cashout"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üî• –†–∏—Å–∫–Ω—É—Ç—å –¥–∞–ª—å—à–µ!", callback_data="coinflip_continue"
                )
            ],
        ]
    )


def back_to_main_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )


def back_to_duels_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é –¥—É—ç–ª–µ–π."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞–≤–∫–∏", callback_data="game_duel"
                )
            ]
        ]
    )


def withdraw_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="15 ‚≠ê (üß∏)", callback_data="gift_15_teddy"),
                InlineKeyboardButton(text="15 ‚≠ê (üíù)", callback_data="gift_15_heart"),
            ],
            [
                InlineKeyboardButton(text="25 ‚≠ê (üåπ)", callback_data="gift_25_rose"),
                InlineKeyboardButton(
                    text="25 ‚≠ê (üéÅ)", callback_data="gift_25_present"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="50 ‚≠ê (üçæ)", callback_data="gift_50_champagne"
                ),
                InlineKeyboardButton(
                    text="50 ‚≠ê (üíê)", callback_data="gift_50_flowers"
                ),
            ],
            [
                InlineKeyboardButton(text="50 ‚≠ê (üöÄ)", callback_data="gift_50_rocket"),
                InlineKeyboardButton(text="50 ‚≠ê (üéÇ)", callback_data="gift_50_cake"),
            ],
            [
                InlineKeyboardButton(text="100 ‚≠ê (üèÜ)", callback_data="gift_100_cup"),
                InlineKeyboardButton(text="100 ‚≠ê (üíç)", callback_data="gift_100_ring"),
            ],
            [
                InlineKeyboardButton(
                    text="100 ‚≠ê (üíé)", callback_data="gift_100_diamond"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )


def achievements_menu_keyboard(
    all_achievements: list, user_achievements: list, page: int = 1
):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    items_per_page = 8
    start_index = (page - 1) * items_per_page
    end_index = start_index + items_per_page

    for ach_id, ach_name in all_achievements[start_index:end_index]:
        status_icon = "‚úÖ" if ach_id in user_achievements else "‚ùå"
        builder.row(
            InlineKeyboardButton(
                text=f"{status_icon} {ach_name}", callback_data="ignore_click"
            )
        )

    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="¬´ –ü—Ä–µ–¥.", callback_data=f"achievements_page:{page-1}"
            )
        )
    if end_index < len(all_achievements):
        nav_buttons.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥. ¬ª", callback_data=f"achievements_page:{page+1}"
            )
        )

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()


def timer_rematch_keyboard(match_id: int, opponent_id: int, bank: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞ –≤ '–ó–≤—ë–∑–¥–Ω–æ–º —Ç–∞–π–º–µ—Ä–µ'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üîÅ –ü—Ä–∏–Ω—è—Ç—å —Ä–µ–≤–∞–Ω—à –Ω–∞ {bank} ‚≠ê",
                    callback_data=f"timer_rematch:{match_id}:{opponent_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –í –ª–æ–±–±–∏ —Ç–∞–π–º–µ—Ä–∞", callback_data="game_timer"
                )
            ],
        ]
    )


def timer_rematch_offer_keyboard(match_id: int, opponent_id: int, bank: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ü–†–ò–ù–Ø–¢–ò–Ø —Ä–µ–≤–∞–Ω—à–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–µ–≤–∞–Ω—à –Ω–∞ {bank} ‚≠ê",
                    callback_data=f"timer_rematch_accept:{match_id}:{opponent_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"timer_rematch_decline:{match_id}",
                )
            ],
        ]
    )
