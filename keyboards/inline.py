# keyboards/inline.py
from typing import Optional, Union
from urllib.parse import quote_plus

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import (
    BASKETBALL_STAKES,
    BOWLING_STAKES,
    COINFLIP_STAKES,
    DARTS_STAKES,
    DICE_STAKES,
    DUEL_STAKES,
    FOOTBALL_STAKES,
    SLOTS_STAKES,
    TIMER_STAKES,
    settings,
)
from gifts import GIFTS_CATALOG
from keyboards.factories import (
    AchievementCallback,
    AdminCallback,
    BasketballCallback,
    BowlingCallback,
    CoinflipCallback,
    DartsCallback,
    DiceCallback,
    DuelCallback,
    FootballCallback,
    GameCallback,
    GiftCallback,
    MenuCallback,
    SlotsCallback,
    TimerCallback,
    UserCallback,
)


def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
            callback_data=MenuCallback(name="earn_bread").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üëæ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data=MenuCallback(name="games").pack()
        ),
        InlineKeyboardButton(
            text="üí≥ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=MenuCallback(name="profile").pack()
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üéÅ –ü—Ä–∏–∑—ã", callback_data=MenuCallback(name="gifts").pack()
        ),
        InlineKeyboardButton(
            text="üèÜ –õ–∏–¥–µ—Ä—ã",
            callback_data=MenuCallback(name="top_users").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üßë‚Äçüíª –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã",
            callback_data=MenuCallback(name="resources").pack(),
        ),
        InlineKeyboardButton(
            text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            callback_data=MenuCallback(name="achievements").pack(),
        ),
    )
    support_text = quote_plus("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º, –¥–µ–ª–æ –≤ —Ç–æ–º —á—Ç–æ..")
    builder.row(
        InlineKeyboardButton(
            text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 12:00-21:00 üÜò",
            url=f"{settings.URL_SUPPORT}?start={support_text}",
        )
    )
    return builder.as_markup()


def resources_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã'."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–∞—à –∫–∞–Ω–∞–ª", url=settings.URL_CHANNEL),
        InlineKeyboardButton(text="–ù–∞—à —á–∞—Ç", url=settings.URL_CHAT),
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞—à–∏ –≤—ã–≤–æ–¥—ã", url=settings.URL_WITHDRAWALS),
        InlineKeyboardButton(text="–ù–∞—à –º–∞–Ω—É–∞–ª", url=settings.URL_MANUAL),
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data=MenuCallback(name="main_menu").pack(),
        )
    )
    return builder.as_markup()


def games_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä."""
    builder = InlineKeyboardBuilder()
    # –ù–∞—à–∏ –∏–≥—Ä—ã
    builder.row(
        InlineKeyboardButton(
            text="üÉè –î—É—ç–ª–∏",
            callback_data=GameCallback(name="duel", action="start").pack(),
        ),
        InlineKeyboardButton(
            text="‚è±Ô∏è –¢–∞–π–º–µ—Ä",
            callback_data=GameCallback(name="timer", action="start").pack(),
        ),
        InlineKeyboardButton(
            text="ü™ô–û—Ä—ë–ª/–†–µ—à–∫–∞",
            callback_data=GameCallback(name="coinflip", action="start").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üé∞ –°–ª–æ—Ç—ã",
            callback_data=GameCallback(name="slots", action="start").pack(),
        ),
        InlineKeyboardButton(
            text="‚öΩÔ∏è –§—É—Ç–±–æ–ª",
            callback_data=GameCallback(name="football", action="start").pack(),
        ),
        InlineKeyboardButton(
            text="üé≥ –ë–æ—É–ª–∏–Ω–≥",
            callback_data=GameCallback(name="bowling", action="start").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª",
            callback_data=GameCallback(name="basketball", action="start").pack(),
        ),
        InlineKeyboardButton(
            text="üéØ –î–∞—Ä—Ç—Å",
            callback_data=GameCallback(name="darts", action="start").pack(),
        ),
        InlineKeyboardButton(
            text="üé≤ –ö–æ—Å—Ç–∏",
            callback_data=GameCallback(name="dice", action="start").pack(),
        ),
    )
    # –ò–≥—Ä—ã-–∑–∞–≥–ª—É—à–∫–∏ (—Ç–µ–ø–µ—Ä—å –∏—Ö –Ω–µ—Ç)

    # WebApp –∏–≥—Ä–∞
    builder.row(
        InlineKeyboardButton(
            text="üéÆ Maniac Clic Game", web_app=WebAppInfo(url=settings.URL_WEBAPP_GAME)
        )
    )
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.row(
        InlineKeyboardButton(
            text="üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
            callback_data=MenuCallback(name="passive_income").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
            callback_data=MenuCallback(name="get_daily_bonus").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data=MenuCallback(name="main_menu").pack(),
        )
    )
    # –£–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    builder.adjust(3, 3, 3, 1, 1, 1)

    return builder.as_markup()


# --- Profile & User Keyboards ---
def profile_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
            callback_data=UserCallback(action="enter_promo").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìä –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
            callback_data=UserCallback(action="transactions").pack(),
        ),
        InlineKeyboardButton(
            text="‚ö° –ß–µ–ª–ª–µ–Ω–¥–∂–∏",
            callback_data=UserCallback(action="daily_challenges").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üì± –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤",
            callback_data=UserCallback(action="social_content").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data=MenuCallback(name="main_menu").pack(),
        )
    )
    return builder.as_markup()


def back_to_profile_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å'."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
            callback_data=MenuCallback(name="profile").pack(),
        )
    )
    return builder.as_markup()


def daily_challenges_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
            callback_data=MenuCallback(name="profile").pack(),
        )
    )
    return builder.as_markup()


def social_content_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üéµ TikTok",
            callback_data=UserCallback(action="tiktok_content").pack(),
        ),
        InlineKeyboardButton(
            text="üì∏ Instagram",
            callback_data=UserCallback(action="instagram_content").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üì± Telegram",
            callback_data=UserCallback(action="telegram_content").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
            callback_data=MenuCallback(name="profile").pack(),
        )
    )
    return builder.as_markup()


def back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data=MenuCallback(name="main_menu").pack(),
        )
    )
    return builder.as_markup()


def promo_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=MenuCallback(name="profile").pack()
        )
    )
    return builder.as_markup()


def top_users_keyboard() -> InlineKeyboardMarkup:
    return back_to_menu_keyboard()


def gifts_catalog_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤."""
    builder = InlineKeyboardBuilder()
    for gift in GIFTS_CATALOG:
        builder.add(
            InlineKeyboardButton(
                text=f"{gift['emoji']} - {gift['cost']} ‚≠ê",
                callback_data=GiftCallback(
                    action="select", item_id=gift["id"], cost=gift["cost"]
                ).pack(),
            )
        )
    builder.adjust(2)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data=MenuCallback(name="main_menu").pack(),
        )
    )
    return builder.as_markup()


def gift_confirm_keyboard(item_id: str, cost: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=GiftCallback(
                action="confirm", item_id=item_id, cost=cost
            ).pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=MenuCallback(name="gifts").pack()
        )
    )
    return builder.as_markup()


# --- Duel Keyboards ---
def duel_stake_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    stake_emojis = ["ü™ô", "üí∞", "üî•", "‚≠ê", "üíé"]

    buttons = []
    for i, stake in enumerate(DUEL_STAKES):
        emoji = stake_emojis[i] if i < len(stake_emojis) else "üí∞"
        buttons.append(
            InlineKeyboardButton(
                text=f"{emoji} {stake} ‚≠ê",
                callback_data=DuelCallback(action="stake", value=stake).pack(),
            )
        )

    builder.row(*buttons, width=3)
    builder.row(
        InlineKeyboardButton(
            text="üéì –û–±—É—á–µ–Ω–∏–µ",
            callback_data=GameCallback(name="help", action="duel_tutorial").pack(),
        ),
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data=GameCallback(name="help", action="duel_stats").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


def duel_searching_keyboard(stake: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
            callback_data=DuelCallback(action="cancel_search", value=stake).pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üéì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?",
            callback_data=GameCallback(name="help", action="duel_tutorial").pack(),
        )
    )
    return builder.as_markup()


def duel_game_keyboard(
    match_id: int,
    hand: list[int],
    opponent_id: int,
    can_boost: bool,
    can_reroll: bool,
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç —Å —ç–º–æ–¥–∑–∏
    card_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
    card_buttons = []

    for card in sorted(hand):
        emoji = card_emojis[card - 1] if card <= 10 else f"{card}"
        card_buttons.append(
            InlineKeyboardButton(
                text=f"üÉè {emoji}",
                callback_data=DuelCallback(
                    action="play", match_id=match_id, value=card
                ).pack(),
            )
        )
    builder.row(*card_buttons, width=len(hand) or 1)
    # –ö–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
    improvement_buttons = []
    if can_boost:
        improvement_buttons.append(
            InlineKeyboardButton(
                text=f"‚ö° –£—Å–∏–ª–∏—Ç—å –∫–∞—Ä—Ç—É ({settings.DUEL_BOOST_COST} ‚≠ê)",
                callback_data=DuelCallback(action="boost", match_id=match_id).pack(),
            )
        )
    if can_reroll:
        improvement_buttons.append(
            InlineKeyboardButton(
                text=f"üîÑ –ù–æ–≤—ã–µ –∫–∞—Ä—Ç—ã ({settings.DUEL_REROLL_COST} ‚≠ê)",
                callback_data=DuelCallback(action="reroll", match_id=match_id).pack(),
            )
        )

    if improvement_buttons:
        if len(improvement_buttons) == 2:
            builder.row(*improvement_buttons)
        else:
            builder.row(improvement_buttons[0])

    builder.row(
        InlineKeyboardButton(
            text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è",
            callback_data=DuelCallback(
                action="surrender", match_id=match_id, opponent_id=opponent_id
            ).pack(),
        )
    )
    return builder.as_markup()


def duel_boost_choice_keyboard(match_id: int, hand: list[int]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=f"–£—Å–∏–ª–∏—Ç—å {card}",
            callback_data=DuelCallback(
                action="boost_confirm", match_id=match_id, value=card
            ).pack(),
        )
        for card in hand
    ]
    builder.row(*buttons, width=3)
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=DuelCallback(action="boost_cancel", match_id=match_id).pack(),
        )
    )
    return builder.as_markup()


def back_to_duels_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥—É—ç–ª—è–º",
            callback_data=GameCallback(name="duel", action="start").pack(),
        )
    )
    return builder.as_markup()


# --- Timer Keyboards ---
def timer_stake_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    stake_emojis = ["‚è±Ô∏è", "‚ö°", "üî•", "üéÜ", "üíé"]

    buttons = []
    for i, stake in enumerate(TIMER_STAKES):
        emoji = stake_emojis[i] if i < len(stake_emojis) else "‚è±Ô∏è"
        buttons.append(
            InlineKeyboardButton(
                text=f"{emoji} {stake} ‚≠ê",
                callback_data=TimerCallback(action="stake", value=stake).pack(),
            )
        )

    builder.row(*buttons, width=3)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


def timer_searching_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
            callback_data=TimerCallback(action="cancel_search").pack(),
        )
    )
    return builder.as_markup()


def timer_game_keyboard(match_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üö® –°–¢–û–ü! üö®",
            callback_data=TimerCallback(action="stop", match_id=match_id).pack(),
        )
    )
    return builder.as_markup()


def timer_finish_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


# --- Coinflip Keyboards ---
def coinflip_stake_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    stakes = [
        InlineKeyboardButton(
            text=f"{stake} ‚≠ê",
            callback_data=CoinflipCallback(action="stake", value=stake).pack(),
        )
        for stake in COINFLIP_STAKES
    ]
    builder.row(*stakes, width=3)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


def coinflip_choice_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–û—Ä—ë–ª",
            callback_data=CoinflipCallback(action="choice", choice="–æ—Ä–µ–ª").pack(),
        ),
        InlineKeyboardButton(
            text="–†–µ—à–∫–∞",
            callback_data=CoinflipCallback(action="choice", choice="—Ä–µ—à–∫–∞").pack(),
        ),
    )
    return builder.as_markup()


def coinflip_continue_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üé≤ –†–∏—Å–∫–Ω—É—Ç—å!",
            callback_data=CoinflipCallback(action="continue").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à",
            callback_data=CoinflipCallback(action="cashout").pack(),
        )
    )
    return builder.as_markup()


def coinflip_play_again_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üé≤ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
            callback_data=GameCallback(name="coinflip", action="start").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


# --- Achievements Keyboards ---
def achievements_keyboard(
    all_achs: list, user_achs: set, page: int, total_pages: int
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for ach in all_achs:
        ach_id, ach_name = ach["id"], ach["name"]
        status = "‚úÖ" if ach_id in user_achs else "‚ùå"
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {ach_name}",
                callback_data=AchievementCallback(action="info", ach_id=ach_id).pack(),
            )
        )
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=AchievementCallback(action="page", page=page - 1).pack(),
            )
        )
    nav_buttons.append(
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
    )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=AchievementCallback(action="page", page=page + 1).pack(),
            )
        )
    if len(nav_buttons) > 1:
        builder.row(*nav_buttons)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data=MenuCallback(name="main_menu").pack(),
        )
    )
    return builder.as_markup()


def back_to_achievements_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É",
            callback_data=MenuCallback(name="achievements").pack(),
        )
    )
    return builder.as_markup()


# --- Admin Keyboards ---
def admin_main_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data=AdminCallback(action="broadcast").pack()
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=AdminCallback(action="stats").pack()
        ),
        InlineKeyboardButton(
            text="üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥",
            callback_data=AdminCallback(action="rewards_list", page=1).pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —é–∑–µ—Ä–µ",
            callback_data=AdminCallback(action="user_info_prompt").pack(),
        ),
        InlineKeyboardButton(
            text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data=AdminCallback(action="promos").pack()
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=AdminCallback(action="manage").pack()
        )
    )
    return builder.as_markup()


def admin_back_keyboard(
    action: str = "main_panel",
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É",
            callback_data=AdminCallback(action=action).pack(),
        )
    )
    return builder.as_markup()


def admin_confirm_keyboard(
    action: str,
    target_id: Optional[int] = None,
    value: Optional[Union[int, str]] = None,
    promo_code: Optional[str] = None,
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=AdminCallback(
                action=f"{action}_confirm",
                target_id=target_id,
                value=str(value),
                promo_code=promo_code,
            ).pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=AdminCallback(action="main_panel").pack(),
        )
    )
    return builder.as_markup()


def admin_rewards_menu(page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    nav_row = []
    if page > 1:
        nav_row.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=AdminCallback(
                    action="rewards_list", page=page - 1
                ).pack(),
            )
        )
    if page < total_pages:
        nav_row.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=AdminCallback(
                    action="rewards_list", page=page + 1
                ).pack(),
            )
        )
    if nav_row:
        builder.row(*nav_row)

    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É",
            callback_data=AdminCallback(action="main_panel").pack(),
        )
    )
    return builder.as_markup()


def admin_reward_details_menu(reward_id: int, user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
            callback_data=AdminCallback(
                action="reward_approve", target_id=reward_id
            ).pack(),
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=AdminCallback(
                action="reward_reject", target_id=reward_id
            ).pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            callback_data=AdminCallback(
                action="reward_fulfill", target_id=reward_id
            ).pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —é–∑–µ—Ä–µ",
            callback_data=AdminCallback(action="user_info", target_id=user_id).pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É",
            callback_data=AdminCallback(action="rewards_list", page=1).pack(),
        )
    )
    return builder.as_markup()


def admin_promos_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
            callback_data=AdminCallback(action="promo_create").pack(),
        ),
        InlineKeyboardButton(
            text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
            callback_data=AdminCallback(action="promo_list", page=1).pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminCallback(action="main_panel").pack()
        )
    )
    return builder.as_markup()


def admin_promos_list_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    nav_row = []
    if page > 1:
        nav_row.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=AdminCallback(action="promo_list", page=page - 1).pack(),
            )
        )
    if page < total_pages:
        nav_row.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=AdminCallback(action="promo_list", page=page + 1).pack(),
            )
        )
    if nav_row:
        builder.row(*nav_row)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –ø—Ä–æ–º–æ–∫–æ–¥–∞–º",
            callback_data=AdminCallback(action="promos").pack(),
        )
    )
    return builder.as_markup()


def admin_promo_manage_keyboard(code: str, is_active: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if is_active:
        builder.row(
            InlineKeyboardButton(
                text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=AdminCallback(
                    action="promo_deactivate", promo_code=code
                ).pack(),
            )
        )
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π",
            callback_data=AdminCallback(
                action="promo_add_uses", promo_code=code
            ).pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É",
            callback_data=AdminCallback(action="promo_list", page=1).pack(),
        )
    )
    return builder.as_markup()


def admin_user_info_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdminCallback(action="user_info_prompt").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data=AdminCallback(action="main_panel").pack(),
        )
    )
    return builder.as_markup()


def admin_manage_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            callback_data=AdminCallback(action="grant").pack(),
        ),
        InlineKeyboardButton(
            text="üí∏ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å",
            callback_data=AdminCallback(action="debit").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (FSM)",
            callback_data=AdminCallback(action="reset_fsm").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminCallback(action="main_panel").pack()
        )
    )
    return builder.as_markup()


# --- Slots Keyboards ---
def slots_stake_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–æ—Ç–∞—Ö."""
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=f"{stake} ‚≠ê",
            callback_data=SlotsCallback(action="spin", value=stake).pack(),
        )
        for stake in SLOTS_STAKES
    ]
    builder.row(*buttons, width=4)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()

    # --- Football Keyboards ---


# –≠–¢–û–¢ –ë–õ–û–ö –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨


def football_stake_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ñ—É—Ç–±–æ–ª–µ."""
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=f"{stake} ‚≠ê",
            callback_data=FootballCallback(action="kick", value=stake).pack(),
        )
        for stake in FOOTBALL_STAKES
    ]
    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏, –ø–æ 4 –≤ —Ä—è–¥
    builder.row(*buttons, width=4)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


def bowling_stake_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ –±–æ—É–ª–∏–Ω–≥–µ."""
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=f"{stake} ‚≠ê",
            callback_data=BowlingCallback(action="throw", value=stake).pack(),
        )
        for stake in BOWLING_STAKES
    ]
    builder.row(*buttons, width=4)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


def bowling_play_again_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—É–ª–∏–Ω–≥–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞'."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üé≥ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
            callback_data=GameCallback(name="bowling", action="start").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()

    # --- Basketball Keyboards ---


# –≠–¢–û–¢ –ë–õ–û–ö –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨


def basketball_stake_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ."""
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=f"{stake} ‚≠ê",
            callback_data=BasketballCallback(action="throw", value=stake).pack(),
        )
        for stake in BASKETBALL_STAKES
    ]
    builder.row(*buttons, width=4)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()

    # --- Darts Keyboards ---


# –≠–¢–û–¢ –ë–õ–û–ö –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨


def darts_stake_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ –¥–∞—Ä—Ç—Å–µ."""
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=f"{stake} ‚≠ê",
            callback_data=DartsCallback(action="throw", value=stake).pack(),
        )
        for stake in DARTS_STAKES
    ]
    builder.row(*buttons, width=4)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


# –≠–¢–û–¢ –ë–õ–û–ö –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ –ü–ï–†–ï–î –§–£–ù–ö–¶–ò–ï–ô –í–´–®–ï


def dice_stake_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ –∫–æ—Å—Ç—è—Ö."""
    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=f"{stake} ‚≠ê",
            callback_data=DiceCallback(action="stake", value=stake).pack(),
        )
        for stake in DICE_STAKES
    ]
    builder.row(*buttons, width=4)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()


# --- Dice Keyboards ---
def dice_range_choice_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üé≤ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 1-3",
            callback_data=DiceCallback(action="choice", choice="low").pack(),
        ),
        InlineKeyboardButton(
            text="üé≤ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 4-6",
            callback_data=DiceCallback(action="choice", choice="high").pack(),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –¥—Ä—É–≥–∏–º –∏–≥—Ä–∞–º", callback_data=MenuCallback(name="games").pack()
        )
    )
    return builder.as_markup()
