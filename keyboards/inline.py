# keyboards/inline.py
from typing import List, Union

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config import settings
from economy import COINFLIP_LEVELS


def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É."""
    buttons = [
        [InlineKeyboardButton(text="‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ö–ª–µ–± ‚≠ê", callback_data="earn")],
        [
            InlineKeyboardButton(text="üëæ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="entertainment"),
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        ],
        [
            InlineKeyboardButton(text="‚úÖ –í—ã–≤–æ–¥", callback_data="withdraw"),
            InlineKeyboardButton(text="üèÜ –¢–æ–ø", callback_data="top"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞—à –∫–∞–Ω–∞–ª", url=settings.URL_CHANNEL),
            InlineKeyboardButton(text="–ù–∞—à–∏ –≤—ã–≤–æ–¥—ã", url=settings.URL_WITHDRAWALS),
        ],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=settings.URL_SUPPORT)],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def entertainment_menu_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –≤–Ω—É—Ç—Ä–∏."""
    buttons = [
        [InlineKeyboardButton(text="‚öîÔ∏è –î—É—ç–ª–∏ 1x1", callback_data="game_duel")],
        [InlineKeyboardButton(text="ü™ô –û—Ä—ë–ª –∏ –†–µ—à–∫–∞", callback_data="game_coinflip")],
        [InlineKeyboardButton(text="‚è±Ô∏è –ó–≤—ë–∑–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä", callback_data="game_timer")],
        [InlineKeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_code")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def withdraw_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å 12 –ø–æ–¥–∞—Ä–∫–∞–º–∏. –ù–∞–∑–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø–æ–º–µ–Ω—è—Ç—å –∑–¥–µ—Å—å."""
    buttons = [
        [
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 1 - 10 ‚≠ê", callback_data="gift_10"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 2 - 20 ‚≠ê", callback_data="gift_20"),
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 3 - 30 ‚≠ê", callback_data="gift_30"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 4 - 40 ‚≠ê", callback_data="gift_40"),
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 5 - 50 ‚≠ê", callback_data="gift_50"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 6 - 60 ‚≠ê", callback_data="gift_60"),
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 7 - 70 ‚≠ê", callback_data="gift_70"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 8 - 80 ‚≠ê", callback_data="gift_80"),
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 9 - 90 ‚≠ê", callback_data="gift_90"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 10 - 100 ‚≠ê", callback_data="gift_100"),
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 11 - 150 ‚≠ê", callback_data="gift_150"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫ 12 - 200 ‚≠ê", callback_data="gift_200"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –ø—Ä–∏–≤–æ–∂—É –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã) ---

def back_to_main_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def earn_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def admin_main_menu() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üì¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üéÅ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_rewards")],
        [
            InlineKeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        ],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_manage")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def admin_rewards_menu(page: int, total_pages: int) -> InlineKeyboardMarkup:
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_rewards_page_{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_rewards_page_{page+1}"))

    buttons = [
        nav_buttons,
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def admin_reward_details_menu(reward_id: int, user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_reward_approve_{reward_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reward_reject_{reward_id}")
        ],
        [
             InlineKeyboardButton(text="üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_reward_fulfill_{reward_id}")
        ],
        [
            InlineKeyboardButton(text="üë§ –ò–Ω—Ñ–æ –æ —é–∑–µ—Ä–µ", callback_data=f"admin_user_info_{user_id}")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_rewards")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def admin_promos_menu() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_promo_create")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def admin_manage_menu() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å", callback_data="admin_grant"),
            InlineKeyboardButton(text="üí∏ –°–ø–∏—Å–∞—Ç—å", callback_data="admin_debit")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_recalc")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def duel_stake_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="1 ‚≠ê", callback_data="duel_stake:1"),
            InlineKeyboardButton(text="3 ‚≠ê", callback_data="duel_stake:3"),
            InlineKeyboardButton(text="5 ‚≠ê", callback_data="duel_stake:5"),
        ],
        [
            InlineKeyboardButton(text="10 ‚≠ê", callback_data="duel_stake:10"),
            InlineKeyboardButton(text="25 ‚≠ê", callback_data="duel_stake:25"),
        ],
        [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="duel_rules")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def duel_searching_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="duel_cancel_search")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def duel_round_keyboard(
    hand: List[Union[int, tuple]], match_id: int, boosts: int, replaces: int
) -> InlineKeyboardMarkup:
    hand_buttons = []
    row = []
    for card in sorted(hand, key=lambda x: x[0] if isinstance(x, tuple) else x):
        if isinstance(card, tuple):
            value, original_value = card
            text = f"‚ö°Ô∏è{value} ({original_value})"
        else:
            value, original_value = card, card
            text = str(value)
        row.append(
            InlineKeyboardButton(
                text=text,
                callback_data=f"duel_play:{match_id}:{value}:{original_value}",
            )
        )
        if len(row) == 5:
            hand_buttons.append(row)
            row = []
    if row:
        hand_buttons.append(row)

    action_buttons = []
    if boosts > 0:
        action_buttons.append(
            InlineKeyboardButton(
                text="‚ö°Ô∏è –£—Å–∏–ª–∏—Ç—å (1 ‚≠ê)", callback_data=f"duel_boost:{match_id}"
            )
        )
    if replaces > 0:
        action_buttons.append(
            InlineKeyboardButton(
                text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å (2 ‚≠ê)", callback_data=f"duel_replace:{match_id}"
            )
        )

    return InlineKeyboardMarkup(
        inline_keyboard=[
            *hand_buttons,
            action_buttons,
            [
                InlineKeyboardButton(
                    text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data=f"duel_surrender:{match_id}"
                )
            ],
        ]
    )


def duel_boost_choice_keyboard(
    hand: List[Union[int, tuple]], match_id: int
) -> InlineKeyboardMarkup:
    buttons = []
    for card in hand:
        original_value = card[1] if isinstance(card, tuple) else card
        buttons.append(
            InlineKeyboardButton(
                text=str(original_value),
                callback_data=f"duel_boost_choice:{match_id}:{original_value}",
            )
        )
    return InlineKeyboardMarkup(
        inline_keyboard=[
            buttons,
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"duel_cancel_action:{match_id}"
                )
            ],
        ]
    )


def duel_surrender_confirm_keyboard(match_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞, —Å–¥–∞—Ç—å—Å—è",
                callback_data=f"duel_surrender_confirm:{match_id}",
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ–π",
                callback_data=f"duel_cancel_action:{match_id}",
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def duel_finish_keyboard(match_id: int, opponent_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="üîÑ –†–µ–≤–∞–Ω—à", callback_data=f"duel_rematch:{match_id}:{opponent_id}"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –¥—É—ç–ª–µ–π", callback_data="game_duel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def back_to_duels_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="game_duel")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def duel_stuck_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="üè≥Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≤–∏—Å—à—É—é –∏–≥—Ä—É", callback_data="duel_leave_active"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –¥—É—ç–ª–µ–π", callback_data="game_duel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def timer_stake_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="1 ‚≠ê", callback_data="timer_stake:1"),
            InlineKeyboardButton(text="3 ‚≠ê", callback_data="timer_stake:3"),
            InlineKeyboardButton(text="5 ‚≠ê", callback_data="timer_stake:5"),
        ],
        [
            InlineKeyboardButton(text="10 ‚≠ê", callback_data="timer_stake:10"),
            InlineKeyboardButton(text="25 ‚≠ê", callback_data="timer_stake:25"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def timer_searching_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="timer_cancel_search"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def timer_game_keyboard(match_id: int, stop_second: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text=f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ {i}",
                callback_data=f"timer_stop:{match_id}:{i}",
            )
        ]
        for i in range(10)
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def timer_finish_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é —Ç–∞–π–º–µ—Ä–∞", callback_data="game_timer")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def achievements_keyboard(
    all_achs: list, user_achs: list, page: int, total_pages: int
) -> InlineKeyboardMarkup:
    buttons = []
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"ach_page_{page-1}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"ach_page_{page+1}")
        )
    buttons.append(nav_buttons)

    for ach_id, ach_name in all_achs:
        status = "‚úÖ" if ach_id in user_achs else "‚ùå"
        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"{status} {ach_name}", callback_data=f"ach_info_{ach_id}"
                )
            ]
        )

    buttons.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def back_to_achievements_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="achievements")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def coinflip_level_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è Coinflip."""
    buttons = []
    for level_id, level_data in COINFLIP_LEVELS.items():
        text = f"{level_data['name']} (x{level_data['prize_mult']:.1f}, {level_data['chance']}%)"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"cf_level:{level_id}")])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def coinflip_stake_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è Coinflip."""
    buttons = [
        [
            InlineKeyboardButton(text="1 ‚≠ê", callback_data="cf_stake:1"),
            InlineKeyboardButton(text="3 ‚≠ê", callback_data="cf_stake:3"),
            InlineKeyboardButton(text="5 ‚≠ê", callback_data="cf_stake:5"),
        ],
        [
            InlineKeyboardButton(text="10 ‚≠ê", callback_data="cf_stake:10"),
            InlineKeyboardButton(text="25 ‚≠ê", callback_data="cf_stake:25"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", callback_data="game_coinflip")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def back_to_games_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é."""
    buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º", callback_data="entertainment")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
