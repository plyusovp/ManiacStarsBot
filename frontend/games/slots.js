// plyusovp/maniacstarsbot/ManiacStarsBot-4df23ef8bd5b8766acddffe6bca30a128458c7a5/frontend/games/slots.js

import { t } from '../core/i18n.js';
import { playWin, playLose } from '../core/audio.js';
import { applyPayout } from '../core/houseedge.js';
import { weightedRandom } from '../core/rng.js';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´ ---
let currentBet = 10;
let isSpinning = false;

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏ –∏—Ö "–≤–µ—Å" (–∫–∞–∫ —á–∞—Å—Ç–æ –æ–Ω–∏ –≤—ã–ø–∞–¥–∞—é—Ç) –∏ –≤—ã–ø–ª–∞—Ç—ã
const SYMBOLS = {
    'üçí': { weight: 25, payout: 5 },  // –í–∏—à–Ω—è
    'üçã': { weight: 20, payout: 8 },  // –õ–∏–º–æ–Ω
    'üçä': { weight: 15, payout: 12 }, // –ê–ø–µ–ª—å—Å–∏–Ω
    'üçâ': { weight: 10, payout: 20 }, // –ê—Ä–±—É–∑
    '‚≠ê': { weight: 7, payout: 50 },  // –ó–≤–µ–∑–¥–∞
    'üíé': { weight: 4, payout: 100 }  // –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º 5 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π (–∏–Ω–¥–µ–∫—Å—ã —è—á–µ–µ–∫ –≤ —Å–µ—Ç–∫–µ 3x3)
const WIN_LINES = [
    [0, 1, 2], // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
    [3, 4, 5], // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
    [6, 7, 8], // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
    [0, 4, 8], // –î–∏–∞–≥–æ–Ω–∞–ª—å \
    [2, 4, 6]  // –î–∏–∞–≥–æ–Ω–∞–ª—å /
];

// --- HTML-–®–ê–ë–õ–û–ù ---
const template = `
    <div class="game-container slots-game">
        <h2 class="game-title">${t('slots_game_title')}</h2>
        <div class="slots-reels-container">
            <div class="slots-line-overlay"></div>
            <div class="reel"></div>
            <div class="reel"></div>
            <div class="reel"></div>
        </div>
        <div class="slots-controls">
            <div class="control-group">
                <label for="slots-bet-amount">${t('bet_amount')}:</label>
                <input type="number" id="slots-bet-amount" value="${currentBet}" min="1">
            </div>
            <button id="spin-button">${t('slots_spin')}</button>
        </div>
        <div class="slots-result">
            <p id="slots-outcome"></p>
        </div>
    </div>
`;

// --- –õ–û–ì–ò–ö–ê –ò–ì–†–´ ---

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–µ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
 */
const handleSpin = () => {
    if (isSpinning) return;
    isSpinning = true;

    const betAmountInput = document.getElementById('slots-bet-amount');
    currentBet = parseInt(betAmountInput.value, 10);

    const reels = document.querySelectorAll('.reel');
    const outcomeElement = document.getElementById('slots-outcome');
    const spinButton = document.getElementById('spin-button');

    if (spinButton) spinButton.disabled = true;
    if (outcomeElement) outcomeElement.textContent = '';

    let finalResults = [];

    reels.forEach((reel, index) => {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        reel.style.backgroundPositionY = '0';
        reel.classList.add('spinning');
        
        // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–∞—Ä–∞–±–∞–Ω
        setTimeout(() => {
            reel.classList.remove('spinning');
            
            const finalReelSymbols = Array.from({ length: 3 }, () => weightedRandom(SYMBOLS));
            finalResults.push(...finalReelSymbols);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –±–∞—Ä–∞–±–∞–Ω
            reel.innerHTML = `<div>${finalReelSymbols.join('</div><div>')}</div>`;

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏–π—Å—è –±–∞—Ä–∞–±–∞–Ω
            if (index === reels.length - 1) {
                checkWin(finalResults);
            }
        }, 1000 + index * 300); // –ë–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    });
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤.
 * @param {string[]} results - –ú–∞—Å—Å–∏–≤ –∏–∑ 9 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ø–æ–ª–µ.
 */
const checkWin = (results) => {
    let totalWin = 0;

    for (const line of WIN_LINES) {
        const [a, b, c] = line;
        if (results[a] === results[b] && results[b] === results[c]) {
            const symbol = results[a];
            totalWin += SYMBOLS[symbol].payout * currentBet;
        }
    }

    const outcomeElement = document.getElementById('slots-outcome');
    const spinButton = document.getElementById('spin-button');

    if (totalWin > 0) {
        const finalPayout = applyPayout(totalWin);
        outcomeElement.textContent = `${t('win_message')}! +${finalPayout.toLocaleString()} ‚≠ê`;
        outcomeElement.style.color = 'var(--green)';
        playWin()
    } else {
        outcomeElement.textContent = `${t('loss_message')}!`;
        outcomeElement.style.color = 'var(--red)';
        playLose()
    }

    if (spinButton) spinButton.disabled = false;
    isSpinning = false;
};

// --- –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–î–£–õ–Ø ---

const init = (container) => {
    container.innerHTML = template;
    document.getElementById('spin-button').addEventListener('click', handleSpin);
};

const cleanup = () => {
    const spinButton = document.getElementById('spin-button');
    if (spinButton) {
        spinButton.removeEventListener('click', handleSpin);
    }
};

export const slotsGame = {
    id: 'slots',
    init,
    cleanup
};
