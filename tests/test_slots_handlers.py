# tests/test_slots_handlers.py

import pytest
from unittest.mock import AsyncMock, MagicMock
from handlers.slots_handlers import get_reels_from_dice


class TestSlotsLogic:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ —Å–ª–æ—Ç–æ–≤"""
    
    def test_get_reels_from_dice(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–π—Å–∞ –Ω–∞ —Ç—Ä–∏ –±–∞—Ä–∞–±–∞–Ω–∞"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–π—Å–∞
        test_cases = [
            (1, (0, 0, 0)),   # BAR BAR BAR
            (2, (1, 0, 0)),   # Grapes BAR BAR
            (5, (0, 1, 0)),   # BAR Grapes BAR
            (17, (0, 0, 1)),  # BAR BAR Grapes
            (64, (3, 3, 3)),  # Seven Seven Seven
            (4, (3, 0, 0)),   # Seven BAR BAR
        ]
        
        for dice_value, expected_reels in test_cases:
            result = get_reels_from_dice(dice_value)
            assert result == expected_reels, f"–î–ª—è –¥–∞–π—Å–∞ {dice_value} –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_reels}, –ø–æ–ª—É—á–µ–Ω–æ {result}"
    
    def test_slots_win_conditions(self):
        """–¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Å–ª–æ—Ç–∞—Ö"""
        # –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à)
        assert get_reels_from_dice(64) == (3, 3, 3)  # Seven Seven Seven
        
        # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö (–Ω–µ —Å–µ–º–µ—Ä–∫–∏)
        assert get_reels_from_dice(1) == (0, 0, 0)    # BAR BAR BAR
        assert get_reels_from_dice(2) == (1, 0, 0)    # –ù–ï —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        
        # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö (–¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–∞—é—Ç –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        reels = get_reels_from_dice(2)  # (1, 0, 0) - –Ω–µ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
        reels = get_reels_from_dice(3)  # (2, 0, 0) - –Ω–µ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
        
        # –ù–∞–π–¥–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –¥–≤—É–º—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–æ–¥—Ä—è–¥
        found_two_match = False
        for dice_val in range(1, 65):
            reel1, reel2, reel3 = get_reels_from_dice(dice_val)
            if (reel1 == reel2) or (reel2 == reel3):
                found_two_match = True
                break
        
        assert found_two_match, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –¥–≤—É–º—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–æ–¥—Ä—è–¥"
    
    def test_slots_lose_conditions(self):
        """–¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –≤ —Å–ª–æ—Ç–∞—Ö"""
        # –í—Å–µ —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        found_all_different = False
        for dice_val in range(1, 65):
            reel1, reel2, reel3 = get_reels_from_dice(dice_val)
            if reel1 != reel2 and reel2 != reel3 and reel1 != reel3:
                found_all_different = True
                break
        
        assert found_all_different, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–æ –≤—Å–µ–º–∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_instance = TestSlotsLogic()
    
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ —Å–ª–æ—Ç–æ–≤...")
    
    try:
        test_instance.test_get_reels_from_dice()
        print("‚úÖ –¢–µ—Å—Ç get_reels_from_dice –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        test_instance.test_slots_win_conditions()
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –≤—ã–∏–≥—Ä—ã—à–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        test_instance.test_slots_lose_conditions()
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
        raise
