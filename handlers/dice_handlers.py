# handlers/dice_handlers.py

import asyncio
import uuid

from aiogram import Bot, F, Router
from aiogram.types import CallbackQuery, Message

from database import db
from handlers.utils import safe_edit_caption, safe_send_message
from keyboards.factories import DiceCallback, GameCallback
from keyboards.inline import dice_choice_keyboard
from lexicon.texts import LEXICON

router = Router()

# –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—ã–∏–≥—Ä—ã—à
DICE_COST = 10
DICE_WIN_AMOUNT = 12


@router.callback_query(GameCallback.filter((F.name == "dice") & (F.action == "start")))
async def dice_menu_handler(callback: CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã '–ö–æ—Å—Ç–∏' —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞–≤–∫–∏."""
    if not callback.message:
        return

    balance = await db.get_user_balance(callback.from_user.id)
    text = LEXICON["dice_menu"].format(
        balance=balance, cost=DICE_COST, prize=DICE_WIN_AMOUNT
    )

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    await safe_edit_caption(
        bot,
        caption=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=dice_choice_keyboard(),
    )
    await callback.answer()


@router.callback_query(DiceCallback.filter(F.action == "choice"))
async def throw_dice_handler(
    callback: CallbackQuery, callback_data: DiceCallback, bot: Bot
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞."""
    user_id = callback.from_user.id
    user_choice = callback_data.choice  # "low" or "high"

    if not user_choice:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    balance = await db.get_user_balance(user_id)

    if balance < DICE_COST:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã.", show_alert=True)
        return

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–π –∫–æ–ª–±—ç–∫
    await callback.answer()

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    idem_key = f"dice-spend-{user_id}-{uuid.uuid4()}"
    spent = await db.spend_balance(
        user_id, DICE_COST, "dice_throw_cost", idem_key=idem_key
    )
    if not spent:
        await safe_send_message(
            bot, user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–æ—Å—Ç–µ–π
    msg: Message = await bot.send_dice(chat_id=user_id, emoji="üé≤")
    dice_value = msg.dice.value

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_win = False
    if user_choice == "low" and dice_value in [1, 2, 3]:
        is_win = True
    elif user_choice == "high" and dice_value in [4, 5, 6]:
        is_win = True

    # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–≥–æ –≤—ã–±–æ—Ä–µ
    choice_text = "1-3" if user_choice == "low" else "4-6"

    await asyncio.sleep(4)

    if is_win:
        await db.add_balance_unrestricted(user_id, DICE_WIN_AMOUNT, "dice_win")
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["dice_win"].format(
            choice=choice_text,
            value=dice_value,
            prize=DICE_WIN_AMOUNT,
            new_balance=new_balance,
        )
    else:
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["dice_lose"].format(
            choice=choice_text,
            value=dice_value,
            cost=DICE_COST,
            new_balance=new_balance,
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    await bot.send_message(user_id, result_text, reply_markup=dice_choice_keyboard())
