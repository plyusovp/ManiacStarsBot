# plyusovp/maniacstarsbot/ManiacStarsBot-67d43495a3d8b0b5689fd3311461f2c73499ed96/handlers/dice_handlers.py

import asyncio
import uuid
from typing import Dict

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from database import db
from handlers.utils import safe_delete, safe_edit_caption
from keyboards.factories import DiceCallback, GameCallback
from keyboards.inline import dice_range_choice_keyboard, dice_stake_keyboard
from lexicon.texts import LEXICON

router = Router()

# –ù–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞: —Å—Ç–∞–≤–∫–∞ -> –≤—ã–∏–≥—Ä—ã—à (–ø–æ—á—Ç–∏ x2)
# –®–∞–Ω—Å 50/50, –ø–æ—ç—Ç–æ–º—É –¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ä–µ–π–∫ –≤ 10% –Ω–∞ –∫—Ä—É–ø–Ω—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö
DICE_PRIZES: Dict[int, int] = {
    1: 2,
    3: 5,
    5: 9,
    10: 18,
}

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSM) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
class DiceState(StatesGroup):
    waiting_for_choice = State()


@router.callback_query(GameCallback.filter((F.name == "dice") & (F.action == "start")))
async def dice_menu_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã '–ö–æ—Å—Ç–∏' —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞–≤–∫–∏."""
    await state.clear()
    if not callback.message:
        return

    balance = await db.get_user_balance(callback.from_user.id)
    text = LEXICON["dice_menu"].format(balance=balance)

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–æ–∫
    await safe_edit_caption(
        bot,
        caption=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=dice_stake_keyboard(),
    )
    await callback.answer()


@router.callback_query(DiceCallback.filter(F.action == "stake"))
async def dice_stake_selected_handler(
    callback: CallbackQuery, callback_data: DiceCallback, bot: Bot, state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω."""
    if not callback.message:
        return

    stake_from_callback = callback_data.value
    if stake_from_callback is None or int(stake_from_callback) not in DICE_PRIZES:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞.", show_alert=True)
        return

    stake = int(stake_from_callback)
    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)

    if balance < stake:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(DiceState.waiting_for_choice)
    await state.update_data(stake=stake)

    text = f"–°—Ç–∞–≤–∫–∞ {stake} ‚≠ê –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –Ω–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—à—å:"
    await safe_edit_caption(
        bot,
        text,
        callback.message.chat.id,
        callback.message.message_id,
        reply_markup=dice_range_choice_keyboard(),
    )
    await callback.answer()


@router.callback_query(DiceState.waiting_for_choice, DiceCallback.filter(F.action == "choice"))
async def throw_dice_handler(
    callback: CallbackQuery, callback_data: DiceCallback, bot: Bot, state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    if not callback.from_user or not callback.message:
        return

    fsm_data = await state.get_data()
    stake = fsm_data.get("stake")
    user_choice = callback_data.choice  # "low" or "high"

    if not stake or not user_choice:
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    await state.clear()
    user_id = callback.from_user.id
    
    # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º—É—Å–æ—Ä–∞
    await safe_delete(bot, callback.message.chat.id, callback.message.message_id)

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    idem_key = f"dice-spend-{user_id}-{uuid.uuid4()}"
    spent = await db.spend_balance(
        user_id, stake, "dice_throw_cost", idem_key=idem_key
    )
    if not spent:
        new_balance = await db.get_user_balance(user_id)
        error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        menu_text = LEXICON["dice_menu"].format(balance=new_balance)
        await bot.send_message(
            user_id, f"{error_text}\n\n{menu_text}", reply_markup=dice_stake_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–æ—Å—Ç–µ–π
    msg: Message = await bot.send_dice(chat_id=user_id, emoji="üé≤")
    dice_value = msg.dice.value

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_win = (user_choice == "low" and dice_value in [1, 2, 3]) or \
             (user_choice == "high" and dice_value in [4, 5, 6])
    
    win_amount = DICE_PRIZES[stake]
    choice_text = "1-3" if user_choice == "low" else "4-6"

    await asyncio.sleep(4)

    if is_win:
        await db.add_balance_unrestricted(user_id, win_amount, "dice_win")
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["dice_win"].format(
            choice=choice_text, value=dice_value, prize=win_amount, new_balance=new_balance
        )
    else:
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["dice_lose"].format(
            choice=choice_text, value=dice_value, cost=stake, new_balance=new_balance
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    menu_text = LEXICON["dice_menu"].format(balance=new_balance)
    final_text = f"{result_text}\n\n{menu_text}"

    await bot.send_message(user_id, final_text, reply_markup=dice_stake_keyboard())