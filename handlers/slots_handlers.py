# handlers/slots_handlers.py

import asyncio
import uuid

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database import db
from handlers.utils import safe_edit_caption
from keyboards.factories import GameCallback, SlotsCallback
from keyboards.inline import slots_keyboard
from lexicon.texts import LEXICON

router = Router()

# –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—ã–∏–≥—Ä—ã—à (–ø–æ–∫–∞ —á—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
SLOT_COST = 10
SLOT_WIN_AMOUNT = 12


@router.callback_query(GameCallback.filter((F.name == "slots") & (F.action == "start")))
async def slots_menu_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ª–æ—Ç–æ–≤."""
    print("!!! –°–õ–û–¢–´ –ó–ê–ü–£–°–¢–ò–õ–ò–°–¨ !!!")
    await state.clear()
    if not callback.message:
        return

    balance = await db.get_user_balance(callback.from_user.id)
    text = LEXICON["slots_menu"].format(
        balance=balance, cost=SLOT_COST, prize=SLOT_WIN_AMOUNT
    )

    await safe_edit_caption(
        bot,
        caption=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=slots_keyboard(),
    )
    await callback.answer()


@router.callback_query(SlotsCallback.filter(F.action == "spin"))
async def spin_slots_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)

    if balance < SLOT_COST:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã.", show_alert=True)
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ–ø—ã—Ç–∫—É
    idem_key = f"slots-spend-{user_id}-{uuid.uuid4()}"
    spent = await db.spend_balance(
        user_id, SLOT_COST, "slots_spin_cost", idem_key=idem_key
    )
    if not spent:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∑–∏–Ω–æ
    msg: Message = await bot.send_dice(chat_id=user_id, emoji="üé∞")

    # –ó–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–Ω–∞—á–∞—é—Ç –≤—ã–∏–≥—Ä—ã—à (—Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞)
    # 1 - —Ç—Ä–∏ BAR, 22 - —Ç—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞, 43 - —Ç—Ä–∏ –ª–∏–º–æ–Ω–∞, 64 - —Ç—Ä–∏ —Å–µ–º–µ—Ä–∫–∏
    winning_values = {1, 22, 43, 64}
    is_win = msg.dice and msg.dice.value in winning_values

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await asyncio.sleep(2)

    if is_win:
        # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        await db.add_balance_unrestricted(user_id, SLOT_WIN_AMOUNT, "slots_win")
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["slots_win"].format(
            prize=SLOT_WIN_AMOUNT, new_balance=new_balance
        )
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["slots_lose"].format(
            cost=SLOT_COST, new_balance=new_balance
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await bot.send_message(user_id, result_text)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    await slots_menu_handler(callback, state, bot)