# handlers/bowling_handlers.py

import asyncio
import uuid
from typing import Dict

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database import db
from handlers.utils import safe_edit_caption, safe_send_message
from keyboards.factories import BowlingCallback, GameCallback
from keyboards.inline import bowling_play_again_keyboard, bowling_stake_keyboard
from lexicon.texts import LEXICON

router = Router()

# –ù–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞: —Å—Ç–∞–≤–∫–∞ -> –≤—ã–∏–≥—Ä—ã—à
BOWLING_PRIZES: Dict[int, int] = {
    1: 5,
    3: 15,
    5: 25,
    10: 50,
}


@router.callback_query(GameCallback.filter((F.name == "bowling") & (F.action == "start")))
async def bowling_menu_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã '–ë–æ—É–ª–∏–Ω–≥' —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞–≤–∫–∏."""
    await state.clear()
    if not callback.message or not callback.from_user:
        return

    balance = await db.get_user_balance(callback.from_user.id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ lexicon, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç 'cost'
    text = LEXICON["bowling_menu"].format(balance=balance)

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–æ–∫
    await safe_edit_caption(
        bot,
        caption=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=bowling_stake_keyboard(),
    )
    await callback.answer()


@router.callback_query(BowlingCallback.filter(F.action == "throw"))
async def throw_bowling_handler(callback: CallbackQuery, callback_data: BowlingCallback, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–æ—Å–æ–∫ —à–∞—Ä–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–µ."""
    if not callback.from_user or not callback.message:
        return

    stake = callback_data.value
    if stake is None or stake not in BOWLING_PRIZES:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞.", show_alert=True)
        return

    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)

    if balance < stake:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã.", show_alert=True)
        return

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–≤–∏—Å–µ–ª–∞"
    await callback.answer()

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ–ø—ã—Ç–∫—É
    idem_key = f"bowling-spend-{user_id}-{uuid.uuid4()}"
    spent = await db.spend_balance(
        user_id, stake, "bowling_throw_cost", idem_key=idem_key
    )
    if not spent:
        await safe_send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –±–æ—É–ª–∏–Ω–≥–∞
    msg: Message = await bot.send_dice(chat_id=user_id, emoji="üé≥")

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await asyncio.sleep(4)

    # –ó–Ω–∞—á–µ–Ω–∏–µ 6 –æ–∑–Ω–∞—á–∞–µ—Ç —Å—Ç—Ä–∞–π–∫
    is_win = msg.dice and msg.dice.value == 6
    win_amount = BOWLING_PRIZES[stake]

    if is_win:
        await db.add_balance_unrestricted(user_id, win_amount, "bowling_win")
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["bowling_win"].format(
            prize=win_amount, new_balance=new_balance
        )
    else:
        new_balance = await db.get_user_balance(user_id)
        result_text = LEXICON["bowling_lose"].format(
            cost=stake, new_balance=new_balance
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
    await bot.send_message(
        user_id, result_text, reply_markup=bowling_play_again_keyboard()
    )
    