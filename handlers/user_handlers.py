# handlers/user_handlers.py
import asyncio
import os
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

import os # –î–æ–±–∞–≤–ª—è–µ–º os
from keyboards.inline import (
    main_menu, back_to_main_menu_keyboard, withdraw_menu, main_reply_keyboard,
    earn_menu_keyboard
)
from config import *
import database.db as db
from handlers.menu_handler import show_main_menu
from .utils import clean_junk_message # üî• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

router = Router()

class PromoCode(StatesGroup):
    waiting_for_code = State()

async def check_subscription(user_id: int, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@router.message(CommandStart())
async def start_handler(message: Message, command: CommandObject, bot: Bot):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=main_reply_keyboard()
    )

    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    referrer_id = command.args
    if referrer_id and referrer_id.isdigit() and int(referrer_id) != user_id:
        referrer_id = int(referrer_id)
    else:
        referrer_id = None

    is_new = await db.add_user(user_id, username, full_name, referrer_id)

    if is_new:
        ach_result = await db.grant_achievement(user_id, 'first_steps')
        if ach_result['granted']:
            # –î–ª—è /start –º—ã –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(ach_result['text'])
        # ... (–∫–æ–¥ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –±–æ–Ω—É—Å–µ
        bonus_check = await db.get_daily_bonus(user_id)
        if bonus_check['status'] == 'success':
             await message.answer("–ö—Å—Ç–∞—Ç–∏, —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω! üòâ\n–ù–∞–ø–∏—à–∏ /bonus, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ.")
             # –°—Ä–∞–∑—É –∂–µ "–ø–æ—Ç—Ä–∞—Ç–∏–º" —ç—Ç–æ—Ç –±–æ–Ω—É—Å, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
             await db.get_daily_bonus(user_id)


    await show_main_menu(bot, chat_id=message.chat.id, user_id=user_id)

@router.message(F.text == "üè† –ú–µ–Ω—é")
async def main_menu_handler(message: Message, bot: Bot):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await show_main_menu(bot, chat_id=message.chat.id, user_id=message.from_user.id)


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_id –∏–∑ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_main_menu(bot, chat_id=callback.message.chat.id, user_id=callback.from_user.id, message_id=callback.message.message_id)

@router.callback_query(F.data == "profile")
async def profile_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    
    ach_result = await db.grant_achievement(callback.from_user.id, 'curious')
    if ach_result['granted']:
        await callback.answer(ach_result['text'], show_alert=True)
    
    balance = await db.get_user_balance(callback.from_user.id)
    referrals_count = await db.get_referrals_count(callback.from_user.id)
    stats = await db.get_user_duel_stats(callback.from_user.id)

    text = f"""
üî• <b>–ü—Ä–æ—Ñ–∏–ª—å</b> üî•

üë§ <b>–ò–º—è:</b> {callback.from_user.full_name}
üîë <b>ID:</b> <code>{callback.from_user.id}</code>

üìÑ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> üìÑ
- <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> {referrals_count}
- <b>–î—É—ç–ª–∏ (–ü–æ–±–µ–¥/–ü–æ—Ä–∞–∂–µ–Ω–∏–π):</b> {stats['wins']}/{stats['losses']}
- <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} ‚≠ê
"""
    await callback.message.edit_media(media=InputMediaPhoto(media=PHOTO_PROFILE, caption=text), reply_markup=back_to_main_menu_keyboard())

@router.callback_query(F.data == "earn")
async def earn_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    bot_info = await bot.get_me()
    ref_link = f"https://t.me/{bot_info.username}?start={callback.from_user.id}"
    invited_count = await db.get_referrals_count(callback.from_user.id)

    text = f"""
‚≠ê <b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b> ‚≠ê

1Ô∏è‚É£ **–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π**
–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<code>{ref_link}</code>
(–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_count})

2Ô∏è‚É£ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å**
–ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞–±–∏—Ä–∞—Ç—å —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∫–æ–º–∞–Ω–¥–æ–π /bonus!

3Ô∏è‚É£ **–ü—Ä–æ–º–æ–∫–æ–¥—ã**
–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ –∑–≤—ë–∑–¥—ã.
"""
    await callback.message.edit_media(media=InputMediaPhoto(media=PHOTO_EARN_STARS, caption=text), reply_markup=earn_menu_keyboard())
@router.callback_query(F.data == "top")
async def top_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    top_users = await db.get_top_referrers(5)
    
    text = "üèÜ <b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:</b>\n\n"
    if not top_users:
        text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª."
    else:
        for i, (user_id, ref_count) in enumerate(top_users, start=1):
            try:
                user = await bot.get_chat(user_id)
                username = f"@{user.username}" if user.username else user.full_name
                text += f"{i}. {username} ‚Äî {ref_count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
            except Exception:
                text += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> ‚Äî {ref_count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
    
    await callback.message.edit_media(media=InputMediaPhoto(media=PHOTO_TOP, caption=text), reply_markup=back_to_main_menu_keyboard())


@router.callback_query(F.data == "withdraw")
async def withdraw_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    balance = await db.get_user_balance(callback.from_user.id)
    referrals_count = await db.get_referrals_count(callback.from_user.id)

    text = f"""
üíµ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} ‚≠ê

‚ÄºÔ∏è <b>–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:</b>
‚Äî –ú–∏–Ω–∏–º—É–º 5 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π (—É –≤–∞—Å {referrals_count})
‚Äî –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ <a href="https://t.me/+Hu5bVLrGpRpiMTBk">–Ω–∞—à –∫–∞–Ω–∞–ª</a>

<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:</b>
"""
    await callback.message.edit_media(media=InputMediaPhoto(media=PHOTO_WITHDRAW, caption=text), reply_markup=withdraw_menu())


@router.callback_query(F.data.startswith("gift_"))
async def withdraw_gift_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    user_id = callback.from_user.id
    
    if not await check_subscription(user_id, bot):
        await callback.answer("–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", show_alert=True)
        return
        
    try:
        cost = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–µ.", show_alert=True)
        return

    balance = await db.get_user_balance(user_id)
    referrals_count = await db.get_referrals_count(user_id)

    if referrals_count < 5:
        await callback.answer(f"–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º 5 –¥—Ä—É–∑–µ–π (—É –≤–∞—Å {referrals_count}).", show_alert=True)
        return
    if balance < cost:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –ù—É–∂–Ω–æ {cost} ‚≠ê, –∞ —É –≤–∞—Å {balance} ‚≠ê.", show_alert=True)
        return

    await db.update_user_balance(user_id, -cost)
    
    gift_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
    for row in callback.message.reply_markup.inline_keyboard:
        for button in row:
            if button.callback_data == callback.data:
                gift_text = button.text
                break

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '—Å–∫—Ä—ã—Ç'} (ID: `{user_id}`)\n–•–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å: {gift_text}\n–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {balance - cost} ‚≠ê")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    reply = await bot.send_message(user_id, "–í—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è! üòç")
    await state.update_data(junk_message_id=reply.message_id)
    await callback.answer()


@router.callback_query(F.data == "promo_code")
async def promo_code_start(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_PROMO, caption="<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b>"),
        reply_markup=back_to_main_menu_keyboard()
    )
    await state.set_state(PromoCode.waiting_for_code)


@router.message(PromoCode.waiting_for_code)
async def process_promo_code(message: Message, state: FSMContext, bot: Bot):
    try:
        await bot.delete_message(message.chat.id, message.message_id - 1)
    except TelegramBadRequest:
        pass
        
    await state.clear()
    code = message.text.strip().upper()
    user_id = message.from_user.id
    
    result = await db.activate_promo(user_id, code)
    response_text = ""
    if isinstance(result, int):
        response_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {result} ‚≠ê"
        await db.grant_achievement(user_id, 'code_breaker', bot)
        
        full_info = await db.get_full_user_info(user_id)
        if full_info and len(full_info['activated_codes']) == 3:
            await db.grant_achievement(user_id, 'promo_master', bot)
            
    elif result == "not_found":
        response_text = "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫."
    elif result == "already_activated":
        response_text = "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥."

    reply = await message.answer(response_text)
    await state.update_data(junk_message_id=reply.message_id)
    
    await message.delete()