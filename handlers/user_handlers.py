# plyusovp/maniacstarsbot/ManiacStarsBot-68ffe9d3e979f3cc61bcf924e4b9ab182d77be5f/handlers/user_handlers.py

import datetime
import logging

from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, ContentType, InputMediaPhoto, Message

from config import settings
from database import db
from gifts import GIFTS_CATALOG
from handlers.utils import check_subscription, safe_edit_caption, safe_edit_media
from keyboards.factories import GiftCallback, UserCallback
from keyboards.inline import (
    back_to_menu_keyboard,
    back_to_profile_keyboard,
    daily_challenges_keyboard,
    gift_confirm_keyboard,
    promo_back_keyboard,
    social_content_keyboard,
)
from keyboards.reply import get_main_menu_keyboard
from lexicon.texts import LEXICON, LEXICON_ERRORS

logger = logging.getLogger(__name__)
router = Router()


class PromoCodeStates(StatesGroup):
    waiting_for_promo_code = State()


@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    await state.clear()
    if not message.from_user:
        return

    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    full_name = message.from_user.full_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")

    args = message.text.split() if message.text else []
    referrer_id = None
    if len(args) > 1 and args[1].startswith("ref_"):
        referrer_id_str = args[1][4:]
        if referrer_id_str.isdigit() and int(referrer_id_str) != user_id:
            referrer_id = int(referrer_id_str)

    is_new_user = await db.add_user(user_id, username, full_name, referrer_id)

    if is_new_user and referrer_id:
        try:
            idem_key = f"ref-{user_id}-{referrer_id}"
            await db.add_balance_with_checks(
                referrer_id, settings.REFERRAL_BONUS, "referral_bonus", idem_key
            )
            await message.bot.send_message(
                referrer_id,
                LEXICON["referral_success_notification"].format(
                    bonus=settings.REFERRAL_BONUS, username=username
                ),
            )
            logger.info(
                f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {settings.REFERRAL_BONUS} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {referrer_id} –∑–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {referrer_id}: {e}")

    await message.answer(
        LEXICON["start_message"].format(full_name=message.from_user.full_name),
        reply_markup=get_main_menu_keyboard(),
    )


@router.message(F.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
async def text_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç'."""
    await command_start(message, state)


@router.callback_query(UserCallback.filter(F.action == "enter_promo"))
async def enter_promo_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PromoCodeStates.waiting_for_promo_code)
    if callback.message:
        await safe_edit_caption(
            callback.bot,
            caption=LEXICON["promo_prompt"],
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=promo_back_keyboard(),
        )
    await callback.answer()


@router.callback_query(UserCallback.filter(F.action == "transactions"))
async def transactions_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    balance = await db.get_user_balance(user_id)
    transactions = await db.get_user_transactions_history(user_id, limit=15)

    if not transactions:
        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç
        text = LEXICON["transactions_empty"].format(balance=balance)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        text = LEXICON["transactions_title"].format(balance=balance)

        for transaction in transactions:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            created_at = transaction["created_at"]
            if isinstance(created_at, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    if "T" in created_at:
                        # ISO —Ñ–æ—Ä–º–∞—Ç
                        date_obj = datetime.datetime.fromisoformat(
                            created_at.replace("Z", "+00:00")
                        )
                    else:
                        # –§–æ—Ä–º–∞—Ç "YYYY-MM-DD HH:MM:SS"
                        date_obj = datetime.datetime.strptime(
                            created_at, "%Y-%m-%d %H:%M:%S"
                        )
                except Exception:
                    date_obj = datetime.datetime.now()
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (timestamp)
                date_obj = datetime.datetime.fromtimestamp(created_at)
            date_str = date_obj.strftime("%d.%m.%Y %H:%M")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            amount = transaction["amount"]
            reason = transaction["reason"]

            if amount > 0:
                emoji = "üí∞"
                amount_text = f"+{amount} ‚≠ê"
            else:
                emoji = "üí∏"
                amount_text = f"{amount} ‚≠ê"

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏—á–∏–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            reason_text = get_transaction_reason_text(reason)

            text += LEXICON["transaction_item"].format(
                emoji=emoji,
                amount_text=amount_text,
                reason_text=reason_text,
                date=date_str,
            )

    await safe_edit_caption(
        callback.bot,
        caption=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=back_to_profile_keyboard(),
    )
    await callback.answer()


@router.callback_query(UserCallback.filter(F.action == "daily_challenges"))
async def daily_challenges_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_referrals = await db.get_daily_referrals_count(user_id)

    text = LEXICON["daily_challenges"].format(today_referrals=today_referrals)

    await safe_edit_caption(
        callback.bot,
        caption=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=daily_challenges_keyboard(),
    )
    await callback.answer()


@router.callback_query(UserCallback.filter(F.action == "social_content"))
async def social_content_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    if not callback.from_user or not callback.message:
        return

    text = LEXICON["social_content"]

    media = InputMediaPhoto(
        media=settings.PHOTO_PROFILE, caption=text, parse_mode="Markdown"
    )

    await safe_edit_media(
        callback.bot,
        media=media,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=social_content_keyboard(),
    )
    await callback.answer()


@router.callback_query(UserCallback.filter(F.action == "tiktok_content"))
async def tiktok_content_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è TikTok."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)
    ref_link = f"https://t.me/{settings.BOT_USERNAME}?start=ref_{user_id}"

    text = LEXICON["tiktok_content"].format(balance=balance, ref_link=ref_link)

    media = InputMediaPhoto(
        media=settings.PHOTO_PROFILE, caption=text, parse_mode="Markdown"
    )

    await safe_edit_media(
        callback.bot,
        media=media,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=social_content_keyboard(),
    )
    await callback.answer()


@router.callback_query(UserCallback.filter(F.action == "instagram_content"))
async def instagram_content_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Instagram."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)
    ref_link = f"https://t.me/{settings.BOT_USERNAME}?start=ref_{user_id}"

    text = LEXICON["instagram_content"].format(balance=balance, ref_link=ref_link)

    media = InputMediaPhoto(
        media=settings.PHOTO_PROFILE, caption=text, parse_mode="Markdown"
    )

    await safe_edit_media(
        callback.bot,
        media=media,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=social_content_keyboard(),
    )
    await callback.answer()


@router.callback_query(UserCallback.filter(F.action == "telegram_content"))
async def telegram_content_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Telegram."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)
    ref_link = f"https://t.me/{settings.BOT_USERNAME}?start=ref_{user_id}"

    text = LEXICON["telegram_content"].format(balance=balance, ref_link=ref_link)

    media = InputMediaPhoto(
        media=settings.PHOTO_PROFILE, caption=text, parse_mode="Markdown"
    )

    await safe_edit_media(
        callback.bot,
        media=media,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=social_content_keyboard(),
    )
    await callback.answer()


def get_transaction_reason_text(reason: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."""
    reason_translations = {
        "referral_bonus": "–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
        "daily_bonus": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
        "passive_income": "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
        "promo_activation": "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞",
        "duel_win": "–ü–æ–±–µ–¥–∞ –≤ –¥—É—ç–ª–∏",
        "duel_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—É—ç–ª–∏",
        "duel_boost": "–£—Å–∏–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –¥—É—ç–ª–∏",
        "duel_reroll": "–°–º–µ–Ω–∞ —Ä—É–∫–∏ –≤ –¥—É—ç–ª–∏",
        "duel_stake_hold": "–°—Ç–∞–≤–∫–∞ –≤ –¥—É—ç–ª–∏",
        "coinflip_win": "–ü–æ–±–µ–¥–∞ –≤ –æ—Ä–µ–ª/—Ä–µ—à–∫–∞",
        "coinflip_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ä–µ–ª/—Ä–µ—à–∫–∞",
        "slots_win": "–í—ã–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–∞—Ö",
        "slots_loss": "–ü—Ä–æ–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–∞—Ö",
        "dice_win": "–ü–æ–±–µ–¥–∞ –≤ –∫—É–±–∏–∫–∞—Ö",
        "dice_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—É–±–∏–∫–∞—Ö",
        "bowling_win": "–ü–æ–±–µ–¥–∞ –≤ –±–æ—É–ª–∏–Ω–≥–µ",
        "bowling_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–æ—É–ª–∏–Ω–≥–µ",
        "basketball_win": "–ü–æ–±–µ–¥–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ",
        "basketball_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ",
        "football_win": "–ü–æ–±–µ–¥–∞ –≤ —Ñ—É—Ç–±–æ–ª–µ",
        "football_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ—É—Ç–±–æ–ª–µ",
        "darts_win": "–ü–æ–±–µ–¥–∞ –≤ –¥–∞—Ä—Ç—Å",
        "darts_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–∞—Ä—Ç—Å",
        "timer_win": "–ü–æ–±–µ–¥–∞ –≤ —Ç–∞–π–º–µ—Ä–µ",
        "timer_loss": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–π–º–µ—Ä–µ",
        "reward_request": "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥",
        "admin_adjustment": "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "admin_grant": "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "level_up_bonus": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è",
        "streak_bonus": "–ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä–∏–∫",
        "daily_challenge": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂",
    }
    return reason_translations.get(reason, reason)


@router.message(Command("promo"))
async def promo_command(message: Message, state: FSMContext):
    await state.set_state(PromoCodeStates.waiting_for_promo_code)
    await message.answer(LEXICON["promo_prompt"], reply_markup=promo_back_keyboard())


@router.message(StateFilter(PromoCodeStates.waiting_for_promo_code), F.text)
async def process_promo_code(message: Message, state: FSMContext):
    await state.clear()
    promo_code = message.text or ""
    if not message.from_user:
        return
    user_id = message.from_user.id
    idem_key = f"promo-{user_id}-{promo_code}-{uuid.uuid4()}"

    try:
        result = await db.activate_promo(user_id, promo_code, idem_key)
        if isinstance(result, int):
            await message.answer(
                LEXICON["promo_success"].format(amount=result),
                reply_markup=get_main_menu_keyboard(),
            )
        else:
            await message.answer(
                LEXICON["promo_fail"].format(reason=result),
                reply_markup=get_main_menu_keyboard(),
            )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ '{promo_code}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await message.answer(
            LEXICON["promo_fail"].format(reason="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."),
            reply_markup=get_main_menu_keyboard(),
        )


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–í–û–î–ê –ü–û–î–ê–†–ö–û–í ---


@router.callback_query(GiftCallback.filter(F.action == "select"))
async def select_gift_handler(
    callback: CallbackQuery, callback_data: GiftCallback, bot: Bot
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞."""
    item_id = callback_data.item_id
    cost = callback_data.cost

    gift = next((g for g in GIFTS_CATALOG if g["id"] == item_id), None)
    if not gift:
        await callback.answer("–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    text = LEXICON["gift_confirm"].format(
        cost=cost, emoji=gift["emoji"], name=gift["name"]
    )

    if callback.message:
        await safe_edit_caption(
            bot,
            text,
            callback.message.chat.id,
            callback.message.message_id,
            reply_markup=gift_confirm_keyboard(item_id, cost),
        )
    await callback.answer()


@router.callback_query(GiftCallback.filter(F.action == "confirm"))
async def confirm_gift_handler(
    callback: CallbackQuery, callback_data: GiftCallback, bot: Bot
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id
    item_id = callback_data.item_id
    cost = callback_data.cost

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balance = await db.get_user_balance(user_id)
    if balance < cost:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", show_alert=True)
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_id not in settings.ADMIN_IDS:
        referrals_count = await db.get_referrals_count(user_id)
        if referrals_count < settings.MIN_REFERRALS_FOR_WITHDRAW:
            error_text = LEXICON_ERRORS["error_not_enough_referrals"].format(
                min_refs=settings.MIN_REFERRALS_FOR_WITHDRAW,
                current_refs=referrals_count,
            )
            await callback.answer(error_text, show_alert=True)
            return

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    is_subscribed = await check_subscription(bot, user_id)
    if not is_subscribed:
        await callback.answer(LEXICON_ERRORS["error_not_subscribed"], show_alert=True)
        return

    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    idem_key = f"reward-{user_id}-{item_id}-{uuid.uuid4()}"
    result = await db.create_reward_request(user_id, item_id, cost, idem_key)

    if result.get("success"):
        gift = next((g for g in GIFTS_CATALOG if g["id"] == item_id), None)
        if gift:
            success_text = LEXICON["withdrawal_success"].format(
                emoji=gift["emoji"], name=gift["name"], amount=cost
            )
            await safe_edit_caption(
                bot,
                success_text,
                callback.message.chat.id,
                callback.message.message_id,
                reply_markup=back_to_menu_keyboard(),
            )
            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", show_alert=True)
    else:
        reason = result.get("reason", "unknown_error")
        await callback.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –û—à–∏–±–∫–∞: {reason}", show_alert=True
        )


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())


@router.message(Command("id"))
async def get_id(message: Message):
    if not message.from_user:
        return
    user_id = message.from_user.id
    username = message.from_user.username
    chat_id = message.chat.id
    await message.answer(
        f"–¢–≤–æ–π ID: <code>{user_id}</code>\n"
        f"–¢–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
        f"ID —á–∞—Ç–∞: <code>{chat_id}</code>"
    )


