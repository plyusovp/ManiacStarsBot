# handlers/user_handlers.py
import html
import os

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InputMediaPhoto, Message

from config import (ADMIN_IDS, CHANNEL_ID, PHOTO_EARN_STARS, PHOTO_PROFILE,
                    PHOTO_PROMO, PHOTO_TOP, PHOTO_WITHDRAW)
from database import db
from handlers.menu_handler import show_main_menu
from handlers.utils import clean_junk_message
from keyboards.inline import (back_to_main_menu_keyboard, earn_menu_keyboard,
                              main_reply_keyboard, withdraw_menu)
from lexicon.texts import LEXICON

router = Router()


class PromoCode(StatesGroup):
    waiting_for_code = State()


async def check_subscription(user_id: int, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


@router.message(CommandStart())
async def start_handler(
    message: Message, command: CommandObject, bot: Bot, state: FSMContext
):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_reply_keyboard())

    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    referrer_id = command.args
    if referrer_id and referrer_id.isdigit() and int(referrer_id) != user_id:
        referrer_id = int(referrer_id)
    else:
        referrer_id = None

    is_new = await db.add_user(user_id, username, full_name, referrer_id)

    if is_new:
        await db.grant_achievement(user_id, "first_steps", bot)

        flag_file = "compensation_sent.flag"
        if not os.path.exists(flag_file):
            await db.add_stars(user_id, 2)
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ üòî\n\n"
                "–û—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, –∏ –≤—Å–µ–º –≤—ã–¥–∞–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è <b>+2 ‚≠ê</b>.\n\n"
                "(–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ä–∞–Ω–µ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º). –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
            )

        if referrer_id:
            try:
                await bot.send_message(
                    referrer_id,
                    "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! +5 ‚≠ê",
                )

                ref_count = await db.get_referrals_count(referrer_id)
                ach_map = {
                    1: "first_referral",
                    5: "friendly",
                    15: "social",
                    50: "legend",
                }
                if ref_count in ach_map:
                    await db.grant_achievement(referrer_id, ach_map[ref_count], bot)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")

    await show_main_menu(bot, chat_id=message.chat.id, user_id=user_id)


@router.message(F.text == "üè† –ú–µ–Ω—é")
async def main_menu_handler(message: Message, bot: Bot, state: FSMContext):
    await message.delete()
    # –ü–∞—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ
    bonus_check = await db.get_daily_bonus(message.from_user.id)
    if bonus_check["status"] == "success":
        # "–ü–æ—Ç—Ä–∞—Ç–∏–º" –±–æ–Ω—É—Å, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await db.get_daily_bonus(message.from_user.id)
        await message.answer(
            "–ö—Å—Ç–∞—Ç–∏, —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω! üòâ\n–ù–∞–ø–∏—à–∏ /bonus, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ."
        )

    await show_main_menu(bot, chat_id=message.chat.id, user_id=message.from_user.id)


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    await show_main_menu(
        bot,
        chat_id=callback.message.chat.id,
        user_id=callback.from_user.id,
        message_id=callback.message.message_id,
    )


@router.callback_query(F.data == "profile")
async def profile_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    user_id = callback.from_user.id

    ach_result = await db.grant_achievement(user_id, "curious", bot)
    if ach_result:
        await callback.answer(
            "üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n¬´–õ—é–±–æ–ø—ã—Ç–Ω—ã–π¬ª (+1 ‚≠ê)", show_alert=True
        )

    balance = await db.get_user_balance(user_id)
    referrals_count = await db.get_referrals_count(user_id)
    stats = await db.get_user_duel_stats(user_id)

    text = LEXICON["profile"].format(
        full_name=html.escape(callback.from_user.full_name),
        user_id=user_id,
        referrals_count=referrals_count,
        duel_wins=stats["wins"],
        duel_losses=stats["losses"],
        balance=balance,
    )
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_PROFILE, caption=text),
        reply_markup=back_to_main_menu_keyboard(),
    )


@router.callback_query(F.data == "earn")
async def earn_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    bot_info = await bot.get_me()
    user_id = callback.from_user.id
    ref_link = f"https://t.me/{bot_info.username}?start={user_id}"
    invited_count = await db.get_referrals_count(user_id)

    text = LEXICON["earn_menu"].format(ref_link=ref_link, invited_count=invited_count)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_EARN_STARS, caption=text),
        reply_markup=earn_menu_keyboard(),
    )


@router.callback_query(F.data == "top")
async def top_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    top_users = await db.get_top_referrers(5)

    top_users_text = ""
    if not top_users:
        top_users_text = "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª."
    else:
        for i, (user_id, ref_count) in enumerate(top_users, start=1):
            try:
                user = await bot.get_chat(user_id)
                username = html.escape(
                    f"@{user.username}" if user.username else user.full_name
                )
                top_users_text += f"{i}. {username} ‚Äî {ref_count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
            except Exception:
                top_users_text += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> ‚Äî {ref_count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"

    text = LEXICON["top_menu"].format(top_users_text=top_users_text)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_TOP, caption=text),
        reply_markup=back_to_main_menu_keyboard(),
    )


@router.callback_query(F.data == "withdraw")
async def withdraw_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    balance = await db.get_user_balance(callback.from_user.id)
    referrals_count = await db.get_referrals_count(callback.from_user.id)

    text = LEXICON["withdraw_menu"].format(
        balance=balance, referrals_count=referrals_count
    )
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_WITHDRAW, caption=text),
        reply_markup=withdraw_menu(),
    )


@router.callback_query(F.data.startswith("gift_"))
async def withdraw_gift_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    user_id = callback.from_user.id

    if not await check_subscription(user_id, bot):
        await callback.answer(
            "–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", show_alert=True
        )
        return

    try:
        cost = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–µ.", show_alert=True)
        return

    referrals_count = await db.get_referrals_count(user_id)
    if referrals_count < 5:
        await callback.answer(
            f"–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º 5 –¥—Ä—É–∑–µ–π (—É –≤–∞—Å {referrals_count}).",
            show_alert=True,
        )
        return

    ok = await db.update_user_balance(user_id, -cost)
    if not ok:
        balance = await db.get_user_balance(user_id)
        await callback.answer(
            f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –ù—É–∂–Ω–æ {cost} ‚≠ê, –∞ —É –≤–∞—Å {balance} ‚≠ê.",
            show_alert=True,
        )
        return

    gift_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
    for row in callback.message.reply_markup.inline_keyboard:
        for button in row:
            if button.callback_data == callback.data:
                gift_text = button.text
                break

    balance_after = await db.get_user_balance(user_id)
    for admin_id in ADMIN_IDS:
        try:
            admin_text = (
                f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '—Å–∫—Ä—ã—Ç'} (ID: `{user_id}`)\n"
                f"–•–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å: {html.escape(gift_text)}\n"
                f"–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {balance_after} ‚≠ê"
            )
            await bot.send_message(admin_id, admin_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    reply = await bot.send_message(user_id, "–í—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è! üòç")
    await state.update_data(junk_message_id=reply.message_id)
    await callback.answer()


@router.callback_query(F.data == "promo_code")
async def promo_code_start(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_PROMO, caption=LEXICON["promo_prompt"]),
        reply_markup=back_to_main_menu_keyboard(),
    )
    await state.set_state(PromoCode.waiting_for_code)


@router.message(PromoCode.waiting_for_code)
async def process_promo_code(message: Message, state: FSMContext, bot: Bot):
    try:
        await bot.delete_message(message.chat.id, message.message_id - 1)
    except TelegramBadRequest:
        pass

    await state.clear()
    code = message.text.strip().upper()
    user_id = message.from_user.id

    result = await db.activate_promo(user_id, code)

    if isinstance(result, int):
        response_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {result} ‚≠ê"
        await message.answer(response_text)

        await db.grant_achievement(user_id, "code_breaker", bot)

        full_info = await db.get_full_user_info(user_id)
        if full_info and len(full_info["activated_codes"]) >= 3:
            await db.grant_achievement(user_id, "promo_master", bot)

    elif result == "not_found":
        response_text = "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫."
        await message.answer(response_text)
    elif result == "already_activated":
        response_text = "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥."
        await message.answer(response_text)

    await message.delete()
