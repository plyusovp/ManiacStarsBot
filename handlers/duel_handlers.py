# plyusovp/maniacstarsbot/ManiacStarsBot-4df23ef8bd5b8766acddffe6bca30a128458c7a5/handlers/duel_handlers.py

import asyncio
import logging
import secrets
from dataclasses import dataclass, field
from typing import Optional

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from config import settings
from database import db
from handlers.utils import safe_delete, safe_edit_caption, safe_send_message
from keyboards.factories import DuelCallback, GameCallback
from keyboards.inline import (
    back_to_duels_keyboard,
    duel_boost_choice_keyboard,
    duel_game_keyboard,
    duel_searching_keyboard,
    duel_stake_keyboard,
)
from lexicon.texts import LEXICON

router = Router()


@dataclass
class Player:
    id: int
    message_id: int
    hand: list[int] = field(default_factory=list)
    played_card: Optional[int] = None
    has_boosted: bool = False
    has_rerolled: bool = False


@dataclass
class DuelMatch:
    match_id: int
    p1: Player
    p2: Player
    stake: int
    round: int = 1
    p1_wins: int = 0
    p2_wins: int = 0
    turn_started_at: float = 0
    lock: asyncio.Lock = field(default_factory=asyncio.Lock)
    current_event: Optional[str] = None
    trace_id: Optional[str] = None


duel_queue: dict[int, tuple[int, int, Optional[str]]] = {}
active_duels: dict[int, DuelMatch] = {}
DUEL_MATCHMAKING_LOCK = asyncio.Lock()
rand = secrets.SystemRandom()


def deal_hand() -> list[int]:
    return rand.sample(range(1, 11), 5)


async def update_game_interface(
    bot: Bot, match: DuelMatch, text_override: Optional[str] = None
):
    event_text = LEXICON.get(match.current_event, "") if match.current_event else ""

    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç —Å —ç–º–æ–¥–∑–∏
    card_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]

    def format_hand(hand):
        formatted_cards = []
        for card in sorted(hand):
            emoji = card_emojis[card - 1] if card <= 10 else f"{card}"
            formatted_cards.append(emoji)
        return " ".join(formatted_cards)

    p1_hand_text = format_hand(match.p1.hand)
    p2_hand_text = format_hand(match.p2.hand)
    p1_text = text_override or LEXICON["duel_turn"].format(
        round=match.round,
        p1_wins=match.p1_wins,
        p2_wins=match.p2_wins,
        opponent_card="?",
        hand_text=p1_hand_text,
        event_text=event_text,
    )
    p2_text = text_override or LEXICON["duel_turn"].format(
        round=match.round,
        p1_wins=match.p2_wins,
        p2_wins=match.p1_wins,
        opponent_card="?",
        hand_text=p2_hand_text,
        event_text=event_text,
    )
    p1_keyboard = (
        back_to_duels_keyboard()
        if text_override
        else duel_game_keyboard(
            match.match_id,
            match.p1.hand,
            match.p2.id,
            not match.p1.has_boosted,
            not match.p1.has_rerolled,
        )
    )
    p2_keyboard = (
        back_to_duels_keyboard()
        if text_override
        else duel_game_keyboard(
            match.match_id,
            match.p2.hand,
            match.p1.id,
            not match.p2.has_boosted,
            not match.p2.has_rerolled,
        )
    )
    await asyncio.gather(
        safe_edit_caption(
            bot,
            p1_text,
            match.p1.id,
            match.p1.message_id,
            reply_markup=p1_keyboard,
        ),
        safe_edit_caption(
            bot,
            p2_text,
            match.p2.id,
            match.p2.message_id,
            reply_markup=p2_keyboard,
        ),
    )


async def start_new_round(bot: Bot, match: DuelMatch):
    if match.p1_wins >= 2 or match.p2_wins >= 2:
        return await resolve_game_end(bot, match)
    match.round += 1
    match.p1.played_card = None
    match.p2.played_card = None
    match.current_event = None

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ–ª—å—à–µ–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏–≥—Ä—ã
    event_chance = 0.15  # 15% –≤–º–µ—Å—Ç–æ 10%
    if rand.random() < event_chance:
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ —Å–æ–±—ã—Ç–∏—è
        events = ["event_comet", "event_black_hole"]

        # –í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—É–Ω–¥–∞—Ö –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –∫–æ–º–µ—Ç—É
        if match.round >= 3:
            events.extend(["event_comet", "event_comet"])  # –£–¥–≤–∞–∏–≤–∞–µ–º —à–∞–Ω—Å –∫–æ–º–µ—Ç—ã

        match.current_event = rand.choice(events)
    await update_game_interface(bot, match)


async def resolve_round(bot: Bot, match: DuelMatch):
    p1_card, p2_card = match.p1.played_card, match.p2.played_card
    if p1_card is None or p2_card is None:
        return
    round_winner = None
    p1_round_text = ""
    p2_round_text = ""

    if match.current_event == "event_black_hole":
        p1_round_text = p2_round_text = LEXICON["event_black_hole_triggered"]
    elif p1_card > p2_card:
        match.p1_wins += 1
        round_winner = match.p1
        p1_round_text = "üèÜ **–ü–û–ë–ï–î–ê!** –í–∞—à–∞ –∫–∞—Ä—Ç–∞ —Å–∏–ª—å–Ω–µ–µ! üèÜ"
        p2_round_text = "üòî **–ü–û–†–ê–ñ–ï–ù–ò–ï...** –ö–∞—Ä—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–∏–ª—å–Ω–µ–µ üòî"
    elif p2_card > p1_card:
        match.p2_wins += 1
        round_winner = match.p2
        p1_round_text = "üòî **–ü–û–†–ê–ñ–ï–ù–ò–ï...** –ö–∞—Ä—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–∏–ª—å–Ω–µ–µ üòî"
        p2_round_text = "üèÜ **–ü–û–ë–ï–î–ê!** –í–∞—à–∞ –∫–∞—Ä—Ç–∞ —Å–∏–ª—å–Ω–µ–µ! üèÜ"
    else:
        p1_round_text = p2_round_text = "ü§ù **–ù–ò–ß–¨–Ø!** –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã! ü§ù"
    if match.current_event == "event_comet" and round_winner:
        if round_winner.id == match.p1.id:
            match.p1_wins = min(match.p1_wins + 1, 2)
        else:
            match.p2_wins = min(match.p2_wins + 1, 2)
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–º–µ—Ç—ã –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
        comet_text = "\n" + LEXICON["event_comet_triggered"]
        p1_round_text += comet_text
        p2_round_text += comet_text

    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    p1_final_text = LEXICON["duel_round_end"].format(
        p1_card=p1_card, p2_card=p2_card, round_result=p1_round_text
    )
    p2_final_text = LEXICON["duel_round_end"].format(
        p1_card=p2_card, p2_card=p1_card, round_result=p2_round_text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
    await asyncio.gather(
        safe_edit_caption(
            bot,
            p1_final_text,
            match.p1.id,
            match.p1.message_id,
            reply_markup=back_to_duels_keyboard(),
        ),
        safe_edit_caption(
            bot,
            p2_final_text,
            match.p2.id,
            match.p2.message_id,
            reply_markup=back_to_duels_keyboard(),
        ),
    )
    await asyncio.sleep(4)
    await start_new_round(bot, match)


async def resolve_game_end(bot: Bot, match: DuelMatch):
    if match.match_id not in active_duels:
        return
    extra = {"trace_id": match.trace_id, "match_id": match.match_id}
    winner_id, loser_id = (
        (match.p1.id, match.p2.id)
        if match.p1_wins > match.p2_wins
        else (match.p2.id, match.p1.id)
    )
    rake = int(match.stake * 2 * (settings.DUEL_RAKE_PERCENT / 100))
    prize = match.stake * 2 - rake
    logging.info(f"Duel finished. Winner: {winner_id}, Prize: {prize}", extra=extra)
    await db.finish_duel_atomic(match.match_id, winner_id, loser_id, prize)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    try:
        from aiogram import Bot as BotType

        if isinstance(bot, BotType):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥
            winner_stats = await db.get_user_duel_stats(winner_id)
            wins = winner_stats.get("wins", 0)

            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–±–µ–¥—ã –≤ –¥—É—ç–ª—è—Ö
            if wins == 1:
                await db.grant_achievement(winner_id, "first_duel_win", bot)
            elif wins == 5:
                await db.grant_achievement(winner_id, "duel_warrior", bot)
            elif wins == 10:
                await db.grant_achievement(winner_id, "duel_master", bot)
            elif wins == 25:
                await db.grant_achievement(winner_id, "duel_legend", bot)
    except Exception as e:
        logging.warning(f"Failed to check duel achievements: {e}")
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    if winner_id == match.p1.id:
        # P1 –ø–æ–±–µ–¥–∏–ª
        p1_final_text = (
            f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –ü–û–ë–ï–î–ò–õ–ò!** üéâ\n\n"
            f"üèÜ –°—á—ë—Ç: {match.p1_wins}:{match.p2_wins}\n"
            f"üí∞ –í—ã–∏–≥—Ä—ã—à: **{prize} ‚≠ê**\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –í–∞—à–∏ –∑–≤—ë–∑–¥—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
        )
        p2_final_text = (
            f"üòî **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ...** üòî\n\n"
            f"üìä –°—á—ë—Ç: {match.p2_wins}:{match.p1_wins}\n"
            f"üí∏ –ü–æ—Ç–µ—Ä—è: **{match.stake} ‚≠ê**\n\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ!"
        )
    else:
        # P2 –ø–æ–±–µ–¥–∏–ª
        p1_final_text = (
            f"üòî **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ...** üòî\n\n"
            f"üìä –°—á—ë—Ç: {match.p1_wins}:{match.p2_wins}\n"
            f"üí∏ –ü–æ—Ç–µ—Ä—è: **{match.stake} ‚≠ê**\n\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ!"
        )
        p2_final_text = (
            f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –ü–û–ë–ï–î–ò–õ–ò!** üéâ\n\n"
            f"üèÜ –°—á—ë—Ç: {match.p2_wins}:{match.p1_wins}\n"
            f"üí∞ –í—ã–∏–≥—Ä—ã—à: **{prize} ‚≠ê**\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –í–∞—à–∏ –∑–≤—ë–∑–¥—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
    await asyncio.gather(
        safe_edit_caption(
            bot,
            p1_final_text,
            match.p1.id,
            match.p1.message_id,
            reply_markup=back_to_duels_keyboard(),
        ),
        safe_edit_caption(
            bot,
            p2_final_text,
            match.p2.id,
            match.p2.message_id,
            reply_markup=back_to_duels_keyboard(),
        ),
    )
    if match.match_id in active_duels:
        del active_duels[match.match_id]


async def start_duel_game(
    bot: Bot,
    match_id: int,
    p1_id: int,
    p2_id: int,
    stake: int,
    p1_msg_id: int,
    p2_msg_id: int,
    trace_id: str,
):
    p1 = Player(id=p1_id, message_id=p1_msg_id, hand=deal_hand())
    p2 = Player(id=p2_id, message_id=p2_msg_id, hand=deal_hand())
    match = DuelMatch(match_id=match_id, p1=p1, p2=p2, stake=stake, trace_id=trace_id)
    active_duels[match_id] = match
    logging.info(
        f"Duel game starting. Match ID: {match_id}",
        extra={"trace_id": trace_id, "p1_id": p1_id, "p2_id": p2_id, "stake": stake},
    )
    await update_game_interface(bot, match)


@router.callback_query(GameCallback.filter((F.name == "duel") & (F.action == "start")))
async def duel_menu_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    if not callback.message:
        return
    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)
    stats = await db.get_user_duel_stats(user_id)
    caption = LEXICON["duel_menu"].format(
        balance=balance,
        rake_percent=settings.DUEL_RAKE_PERCENT,
        wins=stats.get("wins", 0),
        losses=stats.get("losses", 0),
    )
    user_language = await db.get_user_language(callback.from_user.id)
    await safe_edit_caption(
        bot,
        caption,
        callback.message.chat.id,
        callback.message.message_id,
        reply_markup=duel_stake_keyboard(user_language),
        photo=settings.PHOTO_DUEL_MENU,
    )
    await callback.answer()


@router.callback_query(DuelCallback.filter(F.action == "stake"))
async def find_duel_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot, **data
):
    raw_stake = callback_data.value
    if raw_stake is None or not callback.message:
        return
    stake = int(raw_stake)
    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)
    trace_id = data.get("trace_id", "unknown")
    extra = {"trace_id": trace_id, "user_id": user_id, "stake": stake}
    if balance < stake:
        return await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
    async with DUEL_MATCHMAKING_LOCK:
        if stake in duel_queue:
            opponent_id, opponent_msg_id, opponent_trace_id = duel_queue[stake]
            if opponent_id == user_id:
                return await callback.answer("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ.", show_alert=True)
            match_id = await db.create_duel(opponent_id, user_id, stake)
            if match_id:
                del duel_queue[stake]
                logging.info(
                    f"Duel match created successfully: {match_id}", extra=extra
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞
                prize = stake * 2 - int(stake * 2 * (settings.DUEL_RAKE_PERCENT / 100))
                match_text = LEXICON["duel_match_found"].format(
                    stake=stake, prize=prize
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
                await asyncio.gather(
                    safe_edit_caption(
                        bot, match_text, opponent_id, opponent_msg_id, reply_markup=None
                    ),
                    safe_edit_caption(
                        bot,
                        match_text,
                        callback.message.chat.id,
                        callback.message.message_id,
                        reply_markup=None,
                    ),
                )

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                await asyncio.sleep(2)
                asyncio.create_task(
                    start_duel_game(
                        bot,
                        match_id,
                        opponent_id,
                        user_id,
                        stake,
                        opponent_msg_id,
                        callback.message.message_id,
                        trace_id,
                    )
                )
            else:
                logging.warning(
                    f"Failed to create duel atomically for stake {stake}", extra=extra
                )
                await callback.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –∏–ª–∏ —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤.",
                    show_alert=True,
                )
                await safe_send_message(
                    bot,
                    opponent_id,
                    "–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –¥—É—ç–ª—å –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.",
                )
        else:
            logging.info("User started duel search", extra=extra)
            if callback.message:
                duel_queue[stake] = (user_id, callback.message.message_id, trace_id)
    await safe_edit_caption(
        bot,
        LEXICON["duel_searching"].format(stake=stake),
        callback.message.chat.id,
        callback.message.message_id,
        reply_markup=duel_searching_keyboard(stake),
    )
    await callback.answer()


@router.callback_query(DuelCallback.filter(F.action == "cancel_search"))
async def cancel_duel_search_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot, state: FSMContext
):
    raw_stake = callback_data.value
    if raw_stake is None or not callback.message:
        return
    stake = int(raw_stake)
    user_id = callback.from_user.id
    trace_id = state.key.user_id if state.key else "unknown"
    extra = {"trace_id": trace_id, "user_id": user_id, "stake": stake}
    async with DUEL_MATCHMAKING_LOCK:
        if stake in duel_queue and duel_queue[stake][0] == user_id:
            del duel_queue[stake]
            logging.info("User cancelled duel search", extra=extra)
            await callback.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
            await duel_menu_handler(callback, state, bot)
        else:
            logging.warning("Failed to cancel duel search (not in queue?)", extra=extra)
            await callback.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –Ω–∞–π–¥–µ–Ω.",
                show_alert=True,
            )


@router.callback_query(
    DuelCallback.filter(F.action == "play"), flags={"throttling_key": "spin"}
)
async def play_card_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot
):
    match_id = callback_data.match_id
    raw_card_value = callback_data.value
    if match_id is None or raw_card_value is None:
        return
    card_value = int(raw_card_value)
    user_id = callback.from_user.id
    if match_id not in active_duels:
        return await callback.answer(
            "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True
        )
    match = active_duels[match_id]
    async with match.lock:
        player = match.p1 if user_id == match.p1.id else match.p2
        if player.played_card:
            return await callback.answer(
                "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", show_alert=True
            )
        if card_value not in player.hand:
            return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã!", show_alert=True)
        player.hand.remove(card_value)
        player.played_card = card_value
        # –ö—Ä–∞—Å–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–≥—Ä–µ –∫–∞—Ä—Ç
        card_messages = {
            1: "üÉè –°–∫—Ä–æ–º–Ω–æ, –Ω–æ —Å–º–µ–ª–æ!",
            2: "üÉè –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–æ–≥–æ!",
            3: "üÉè –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è!",
            4: "üÉè –°—Ä–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –≤ –¥–µ–ª–µ!",
            5: "üÉè –ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞!",
            6: "üÉè –ù–µ–ø–ª–æ—Ö–æ–π –≤—ã–±–æ—Ä!",
            7: "üî• –°–∏–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞!",
            8: "üî• –û—Ç–ª–∏—á–Ω—ã–π —Ö–æ–¥!",
            9: "‚ú® –ú–æ—â–Ω–∞—è –∞—Ç–∞–∫–∞!",
            10: "üéÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ú–û–©–¨!",
        }

        message = card_messages.get(card_value, f"üÉè –ö–∞—Ä—Ç–∞ {card_value} –≤ –∏–≥—Ä–µ!")
        await callback.answer(message)
        if match.p1.played_card and match.p2.played_card:
            asyncio.create_task(resolve_round(bot, match))
        else:
            await update_game_interface(bot, match)


@router.callback_query(DuelCallback.filter(F.action == "boost"))
async def boost_card_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot
):
    match_id = callback_data.match_id
    if match_id is None:
        return
    user_id = callback.from_user.id
    if match_id not in active_duels:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    match = active_duels[match_id]
    player = match.p1 if user_id == match.p1.id else match.p2
    if player.has_boosted:
        return await callback.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —É—Å–∏–ª–µ–Ω–∏–µ.", show_alert=True)
    balance = await db.get_user_balance(user_id)
    if balance < settings.DUEL_BOOST_COST:
        return await callback.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–∞ {settings.DUEL_BOOST_COST} ‚≠ê.",
            show_alert=True,
        )
    await safe_edit_caption(
        bot,
        "–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —É—Å–∏–ª–∏—Ç—å?",
        user_id,
        player.message_id,
        reply_markup=duel_boost_choice_keyboard(match_id, player.hand),
    )
    await callback.answer()


@router.callback_query(DuelCallback.filter(F.action == "boost_confirm"))
async def boost_confirm_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot
):
    match_id = callback_data.match_id
    raw_card_to_boost = callback_data.value
    if match_id is None or raw_card_to_boost is None:
        return
    card_to_boost = int(raw_card_to_boost)
    user_id = callback.from_user.id
    if match_id not in active_duels:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    match = active_duels[match_id]
    async with match.lock:
        player = match.p1 if user_id == match.p1.id else match.p2
        if player.has_boosted or card_to_boost not in player.hand:
            return await update_game_interface(bot, match)
        success = await db.spend_balance(
            user_id, settings.DUEL_BOOST_COST, "duel_boost", ref_id=str(match_id)
        )
        if not success:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.", show_alert=True)
            return await update_game_interface(bot, match)
        card_index = player.hand.index(card_to_boost)
        player.hand[card_index] += 2
        player.has_boosted = True
        await callback.answer(
            f"‚ö° **–ú–ê–ì–ò–ß–ï–°–ö–û–ï –£–°–ò–õ–ï–ù–ò–ï!** ‚ö°\n"
            f"üÉè –ö–∞—Ä—Ç–∞ {card_to_boost} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–æ—â–Ω—É—é {player.hand[card_index]}! üî•",
            show_alert=True,
        )
        await update_game_interface(bot, match)


@router.callback_query(DuelCallback.filter(F.action == "boost_cancel"))
async def boost_cancel_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot
):
    match_id = callback_data.match_id
    if not match_id or match_id not in active_duels:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    await callback.answer()
    await update_game_interface(bot, active_duels[match_id])


@router.callback_query(DuelCallback.filter(F.action == "reroll"))
async def reroll_hand_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot
):
    match_id = callback_data.match_id
    if match_id is None:
        return
    user_id = callback.from_user.id
    if match_id not in active_duels:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    match = active_duels[match_id]
    async with match.lock:
        player = match.p1 if user_id == match.p1.id else match.p2
        if player.has_rerolled:
            return await callback.answer("–í—ã —É–∂–µ –º–µ–Ω—è–ª–∏ —Ä—É–∫—É.", show_alert=True)
        balance = await db.get_user_balance(user_id)
        if balance < settings.DUEL_REROLL_COST:
            return await callback.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {settings.DUEL_REROLL_COST} ‚≠ê.",
                show_alert=True,
            )
        success = await db.spend_balance(
            user_id, settings.DUEL_REROLL_COST, "duel_reroll", ref_id=str(match_id)
        )
        if not success:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.", show_alert=True)
            return
        player.hand = deal_hand()
        player.has_rerolled = True
        await callback.answer(
            "üåÄ **–ú–ê–ì–ò–Ø –ü–ï–†–ï–¢–ê–°–û–í–ö–ò!** üåÄ\n"
            "üÉè –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã! –ú–æ–∂–µ—Ç, —Å—É–¥—å–±–∞ –±—É–¥–µ—Ç –∫ –≤–∞–º –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–µ–µ? ‚ú®",
            show_alert=True,
        )
        await update_game_interface(bot, match)


@router.callback_query(DuelCallback.filter(F.action == "surrender"))
async def surrender_handler(
    callback: CallbackQuery, callback_data: DuelCallback, bot: Bot
):
    match_id = callback_data.match_id
    if not match_id or match_id not in active_duels:
        return await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
    match = active_duels[match_id]
    extra = {
        "trace_id": match.trace_id,
        "user_id": callback.from_user.id,
        "match_id": match_id,
    }
    logging.info("Player surrendered", extra=extra)
    if match.p1.id == callback.from_user.id:
        match.p2_wins = 2
        match.p1_wins = 0
    else:
        match.p1_wins = 2
        match.p2_wins = 0
    await resolve_game_end(bot, match)
    await callback.answer("–í—ã —Å–¥–∞–ª–∏—Å—å.", show_alert=True)


@router.callback_query(DuelCallback.filter(F.action == "stuck"))
async def duel_stuck_handler(callback: CallbackQuery, bot: Bot):
    cleaned_count = 0
    for match_id in list(active_duels.keys()):
        if (
            asyncio.get_event_loop().time() - active_duels[match_id].turn_started_at
        ) > 300:
            del active_duels[match_id]
            cleaned_count += 1
    await callback.answer(
        f"–û—á–∏—â–µ–Ω–æ {cleaned_count} –∑–∞–≤–∏—Å—à–∏—Ö –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–≥—Ä—É —Å–Ω–æ–≤–∞.",
        show_alert=True,
    )
    if callback.message:
        await safe_delete(bot, callback.message.chat.id, callback.message.message_id)


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(
    GameCallback.filter((F.name == "help") & (F.action == "duel_tutorial"))
)
async def duel_tutorial_handler(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ –¥—É—ç–ª—è–º."""
    if not callback.message:
        return

    await safe_edit_caption(
        bot,
        LEXICON["duel_tutorial"],
        callback.message.chat.id,
        callback.message.message_id,
        reply_markup=back_to_duels_keyboard(),
    )
    await callback.answer()


@router.callback_query(
    GameCallback.filter((F.name == "help") & (F.action == "duel_stats"))
)
async def duel_stats_handler(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π."""
    if not callback.message:
        return

    user_id = callback.from_user.id
    stats = await db.get_user_duel_stats(user_id)
    balance = await db.get_user_balance(user_id)

    total_games = stats.get("wins", 0) + stats.get("losses", 0)
    win_rate = (stats.get("wins", 0) / total_games * 100) if total_games > 0 else 0

    stats_text = (
        f"üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –î–£–≠–õ–Ø–•** üìä\n\n"
        f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance} ‚≠ê\n\n"
        f"‚öîÔ∏è **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
        f"üèÜ –ü–æ–±–µ–¥: {stats.get('wins', 0)}\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats.get('losses', 0)}\n"
        f"üé≤ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"üíØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n\n"
    )

    if win_rate >= 70:
        stats_text += "üéÜ **–õ–ï–ì–ï–ù–î–ê!** –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
    elif win_rate >= 60:
        stats_text += "üèÖ **–ú–ê–°–¢–ï–†!** –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!"
    elif win_rate >= 50:
        stats_text += "üî• **–û–ü–´–¢–ù–´–ô!** –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
    elif total_games > 0:
        stats_text += "üå± **–ù–û–í–ò–ß–û–ö!** –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!"
    else:
        stats_text += "üéÜ **–ì–û–¢–û–í –ö –ü–ï–†–í–û–ô –î–£–≠–õ–ò!** –ü–æ–∫–∞–∂–∏ –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω!"

    await safe_edit_caption(
        bot,
        stats_text,
        callback.message.chat.id,
        callback.message.message_id,
        reply_markup=back_to_duels_keyboard(),
    )
    await callback.answer()
