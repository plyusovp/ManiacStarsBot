# handlers/duel_handlers.py
import asyncio
import random
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

import database.db as db
from keyboards.inline import (
    duel_stake_keyboard, duel_round_keyboard, duel_finish_keyboard,
    entertainment_menu_keyboard, duel_boost_choice_keyboard,
    duel_replace_choice_keyboard, duel_surrender_confirm_keyboard,
    duel_stuck_keyboard, back_to_duels_keyboard
)
from config import PHOTO_MAIN_MENU

router = Router()

duel_queue = {}
active_duels = {}
rematch_offers = {}

class DuelMatch:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏."""
    def __init__(self, match_id, p1_id, p2_id, stake):
        self.match_id = match_id
        self.p1_id = p1_id
        self.p2_id = p2_id
        self.stake = stake
        self.p1_hand = random.sample(range(1, 11), 5)
        self.p2_hand = random.sample(range(1, 11), 5)
        self.p1_wins = 0
        self.p2_wins = 0
        self.current_round = 1
        self.p1_choice = None
        self.p2_choice = None
        self.p1_message_id = None
        self.p2_message_id = None
        self.p1_boosts_left = 1
        self.p2_boosts_left = 1
        self.p1_replace_left = 1
        self.p2_replace_left = 1
        self.bonus_pool = 0
        self.current_round_special = None
        self.p1_timer: asyncio.Task = None
        self.p2_timer: asyncio.Task = None
        self.lock = asyncio.Lock()

    def cancel_timers(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —Ä–∞—É–Ω–¥–∞."""
        if self.p1_timer and not self.p1_timer.done():
            self.p1_timer.cancel()
        if self.p2_timer and not self.p2_timer.done():
            self.p2_timer.cancel()

async def clean_junk_message(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ '–º—É—Å–æ—Ä–Ω–æ–µ' —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ."""
    data = await state.get_data()
    junk_message_id = data.get('junk_message_id')
    if junk_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, junk_message_id)
        except TelegramBadRequest:
            pass
        await state.update_data(junk_message_id=None)

def roll_special_card():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –±—É–¥–µ—Ç –ª–∏ –≤ —Ä–∞—É–Ω–¥–µ —Å–ø–µ—Ü–∫–∞—Ä—Ç–∞."""
    roll = random.randint(1, 100)
    if roll <= 8: return 'black_hole'
    if roll <= 18: return 'comet'
    return None

async def round_timeout_task(bot: Bot, match_id: int, player_id: int):
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç 15 —Å–µ–∫—É–Ω–¥ –∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–∞—É–Ω–¥–µ."""
    await asyncio.sleep(15)
    match = active_duels.get(match_id)
    if not match: return
    
    async with match.lock:
        timed_out_player_id = None
        if player_id == match.p1_id and match.p1_choice is None:
            timed_out_player_id = match.p1_id
            match.p1_choice = -1
        elif player_id == match.p2_id and match.p2_choice is None:
            timed_out_player_id = match.p2_id
            match.p2_choice = -1

        if timed_out_player_id:
            try:
                opponent_id = match.p2_id if timed_out_player_id == match.p1_id else match.p1_id
                await bot.send_message(timed_out_player_id, "‚è≥ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥. –†–∞—É–Ω–¥ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ.")
                await bot.send_message(opponent_id, "‚è≥ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ: {e}")
            
            if match.p1_choice is None: match.p1_choice = -1
            if match.p2_choice is None: match.p2_choice = -1
            
            await resolve_round(bot, match_id)

async def send_round_interface(bot: Bot, match: DuelMatch):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—É–Ω–¥–∞."""
    match.cancel_timers()
    match.p1_choice = None
    match.p2_choice = None
    
    match.p1_boosts_left = 1
    match.p2_boosts_left = 1
    match.p1_replace_left = 1
    match.p2_replace_left = 1
    await db.create_duel_round(match.match_id, match.current_round)
    match.current_round_special = roll_special_card()
    
    special_text = ""
    if match.current_round_special == 'comet':
        special_text = "\n\nüå† **–ö–û–ú–ï–¢–ê!** –°—Ç–∞–≤–∫–∞ —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —É–¥–≤–æ–µ–Ω–∞!"
    elif match.current_round_special == 'black_hole':
        special_text = "\n\nüï≥Ô∏è **–ß–Å–†–ù–ê–Ø –î–´–†–ê!** –≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!"
    
    score_text = f"–°—á—ë—Ç: <b>{match.p1_wins} - {match.p2_wins}</b> (–¥–æ 2 –ø–æ–±–µ–¥)"
    
    p1_text = f"‚öîÔ∏è **–†–∞—É–Ω–¥ {match.current_round}** ‚öîÔ∏è\n\n{score_text}{special_text}\n\n–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:"
    p2_text = f"‚öîÔ∏è **–†–∞—É–Ω–¥ {match.current_round}** ‚öîÔ∏è\n\n{score_text}{special_text}\n\n–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:"
    
    p1_keyboard = duel_round_keyboard(match.p1_hand, match.match_id, match.p1_boosts_left, match.p1_replace_left)
    p2_keyboard = duel_round_keyboard(match.p2_hand, match.match_id, match.p2_boosts_left, match.p2_replace_left)

    try:
        await asyncio.gather(
            bot.edit_message_caption(chat_id=match.p1_id, message_id=match.p1_message_id, caption=p1_text, reply_markup=p1_keyboard),
            bot.edit_message_caption(chat_id=match.p2_id, message_id=match.p2_message_id, caption=p2_text, reply_markup=p2_keyboard)
        )
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞—É–Ω–¥–∞: {e}")
    
    match.p1_timer = asyncio.create_task(round_timeout_task(bot, match.match_id, match.p1_id))
    match.p2_timer = asyncio.create_task(round_timeout_task(bot, match.match_id, match.p2_id))

async def resolve_round(bot: Bot, match_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—É–Ω–¥, –µ—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥."""
    match = active_duels.get(match_id)
    if not match or not (match.p1_choice is not None and match.p2_choice is not None): return
    match.cancel_timers()
    
    if match.current_round_special == 'black_hole':
        await db.save_duel_round(match.match_id, match.current_round, match.p1_choice, match.p2_choice, 'void', 'black_hole')
        await asyncio.gather(
            bot.edit_message_caption(caption="üï≥Ô∏è **–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞!** –†–∞—É–Ω–¥ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω. –ö–∞—Ä—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ä—É–∫—É. –ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞...", chat_id=match.p1_id, message_id=match.p1_message_id, reply_markup=None),
            bot.edit_message_caption(caption="üï≥Ô∏è **–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞!** –†–∞—É–Ω–¥ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω. –ö–∞—Ä—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ä—É–∫—É. –ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞...", chat_id=match.p2_id, message_id=match.p2_message_id, reply_markup=None)
        )
        await asyncio.sleep(3)
        return await send_round_interface(bot, match)
        
    p1_card, p2_card = match.p1_choice, match.p2_choice
    round_winner = 'p1' if p1_card > p2_card else 'p2' if p2_card > p1_card else 'draw'

    comet_bonus = 0
    if match.current_round_special == 'comet' and round_winner != 'draw':
        match.bonus_pool += match.stake
        comet_bonus = match.stake

    if round_winner == 'p1': match.p1_wins += 1
    elif round_winner == 'p2': match.p2_wins += 1
    
    p1_result_text = "–¢—ã –ø–æ–±–µ–¥–∏–ª –≤ —Ä–∞—É–Ω–¥–µ!" if round_winner == 'p1' else "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥." if round_winner == 'p2' else "–ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ."
    p2_result_text = "–¢—ã –ø–æ–±–µ–¥–∏–ª –≤ —Ä–∞—É–Ω–¥–µ!" if round_winner == 'p2' else "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥." if round_winner == 'p1' else "–ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ."
    
    p1_reveal = f"–í—Å–∫—Ä—ã—Ç–∏–µ! –¢—ã: üÉè<b>{p1_card if p1_card != -1 else '–¢–∞–π–º–∞—É—Ç'}</b> vs –°–æ–ø–µ—Ä–Ω–∏–∫: üÉè<b>{p2_card if p2_card != -1 else '–¢–∞–π–º–∞—É—Ç'}</b>\n\n{p1_result_text}{f' üå† –ö–æ–º–µ—Ç–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –±–æ–Ω—É—Å –≤ {comet_bonus} ‚≠ê!' if comet_bonus else ''}"
    p2_reveal = f"–í—Å–∫—Ä—ã—Ç–∏–µ! –¢—ã: üÉè<b>{p2_card if p2_card != -1 else '–¢–∞–π–º–∞—É—Ç'}</b> vs –°–æ–ø–µ—Ä–Ω–∏–∫: üÉè<b>{p1_card if p1_card != -1 else '–¢–∞–π–º–∞—É—Ç'}</b>\n\n{p2_result_text}{f' üå† –ö–æ–º–µ—Ç–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –±–æ–Ω—É—Å –≤ {comet_bonus} ‚≠ê!' if comet_bonus else ''}"

    await db.save_duel_round(match.match_id, match.current_round, p1_card, p2_card, round_winner, match.current_round_special)
    await asyncio.gather(
        bot.edit_message_caption(caption=p1_reveal, chat_id=match.p1_id, message_id=match.p1_message_id, reply_markup=None),
        bot.edit_message_caption(caption=p2_reveal, chat_id=match.p2_id, message_id=match.p2_message_id, reply_markup=None)
    )
    await asyncio.sleep(3)

    is_match_over = match.p1_wins >= 2 or match.p2_wins >= 2 or match.current_round >= 5
    if is_match_over:
        await resolve_match(bot, match_id)
    else:
        match.current_round += 1
        await send_round_interface(bot, match)

async def resolve_match(bot: Bot, match_id: int, surrendered_player_id: int = None):
    match = active_duels.get(match_id)
    if not match: return

    winner_id, loser_id = None, None
    if surrendered_player_id:
        winner_id = match.p2_id if surrendered_player_id == match.p1_id else match.p1_id
        loser_id = surrendered_player_id
    elif match.p1_wins > match.p2_wins:
        winner_id, loser_id = match.p1_id, match.p2_id
    elif match.p2_wins > match.p1_wins:
        winner_id, loser_id = match.p2_id, match.p1_id
    else:
        draw_text = f"ü§ù –ù–∏—á—å—è!\n\n–°—á—ë—Ç –º–∞—Ç—á–∞: {match.p1_wins}:{match.p2_wins}.\n\n–°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∏–≥—Ä–æ–∫–∞–º."
        await asyncio.gather(
            bot.edit_message_caption(caption=draw_text, chat_id=match.p1_id, message_id=match.p1_message_id, reply_markup=duel_finish_keyboard(match_id)),
            bot.edit_message_caption(caption=draw_text, chat_id=match.p2_id, message_id=match.p2_message_id, reply_markup=duel_finish_keyboard(match_id))
        )
        await db.finish_duel(match_id, None, None)
        if match_id in active_duels: del active_duels[match_id]
        return

    score = f"{match.p1_wins}:{match.p2_wins}" if winner_id == match.p1_id else f"{match.p2_wins}:{match.p1_wins}"
    bank = match.stake * 2
    rake = int(bank * 0.07)
    prize = bank - rake + match.bonus_pool
    
    await db.update_user_balance(winner_id, prize)
    await db.update_user_balance(loser_id, -match.stake)
    await db.finish_duel(match_id, winner_id, loser_id)
    
    winner_text = f"üèÜ **–ü–û–ë–ï–î–ê!** üèÜ\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª –º–∞—Ç—á —Å–æ —Å—á—ë—Ç–æ–º {score}.\n\n–¢–≤–æ–π –ø—Ä–∏–∑: <b>{prize} ‚≠ê</b> (–±–∞–Ω–∫ {bank}‚≠ê - –∫–æ–º–∏—Å—Å–∏—è {rake}‚≠ê + –±–æ–Ω—É—Å—ã {match.bonus_pool}‚≠ê)."
    loser_text = f"üòø **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ** üòø\n\n–°—á—ë—Ç –º–∞—Ç—á–∞: {score}.\n\n–ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!"
    
    if surrendered_player_id:
        winner_text = f"üèÜ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞!** üèÜ\n\n–°–æ–ø–µ—Ä–Ω–∏–∫ —Å–¥–∞–ª—Å—è. –¢–≤–æ–π –ø—Ä–∏–∑: <b>{prize} ‚≠ê</b>."
        loser_text = f"üè≥Ô∏è **–í—ã —Å–¥–∞–ª–∏—Å—å** üè≥Ô∏è\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {match.stake} ‚≠ê."
    
    await asyncio.gather(
        bot.edit_message_caption(caption=winner_text, chat_id=winner_id, message_id=match.p1_message_id, reply_markup=duel_finish_keyboard(match_id)),
        bot.edit_message_caption(caption=loser_text, chat_id=loser_id, message_id=match.p2_message_id, reply_markup=duel_finish_keyboard(match_id))
    )
    if match_id in active_duels: del active_duels[match_id]

async def start_match(bot: Bot, p1_id: int, p2_id: int, stake: int, p1_msg_id: int, p2_msg_id: int):
    if await db.is_user_in_active_duel(p1_id) or await db.is_user_in_active_duel(p2_id):
        return

    match_id = await db.create_duel(p1_id, p2_id, stake)
    match = DuelMatch(match_id, p1_id, p2_id, stake)
    match.p1_message_id = p1_msg_id
    match.p2_message_id = p2_msg_id
    active_duels[match_id] = match
    
    try:
        p1 = await bot.get_chat(p1_id)
        p2 = await bot.get_chat(p2_id)
        p1_username = f"@{p1.username}" if p1.username else p1.full_name
        p2_username = f"@{p2.username}" if p2.username else p2.full_name
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö: {e}")
        if match_id in active_duels: del active_duels[match_id]
        return
    
    base_text = f"üí• **–ú–∞—Ç—á –Ω–∞–π–¥–µ–Ω!** üí•\n\n<b>{p1_username}</b> üÜö <b>{p2_username}</b>\n\n<b>–°—Ç–∞–≤–∫–∞:</b> {stake} ‚≠ê —Å –∫–∞–∂–¥–æ–≥–æ\n"

    for i in range(5, 0, -1):
        countdown_text = base_text + f"‚öîÔ∏è **–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑: {i}** ‚öîÔ∏è"
        try:
            await asyncio.gather(
                bot.edit_message_caption(caption=countdown_text, chat_id=p1_id, message_id=p1_msg_id),
                bot.edit_message_caption(caption=countdown_text, chat_id=p2_id, message_id=p2_msg_id)
            )
        except TelegramBadRequest as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–±–±–∏: {e}")
            if match_id in active_duels: del active_duels[match_id]
            return
        if i > 1:
            await asyncio.sleep(1)
        
    await send_round_interface(bot, match)

@router.callback_query(F.data == "game_duel")
async def duel_menu_handler(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    
    if await db.is_user_in_active_duel(callback.from_user.id):
        text = "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é (–≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É)."
        return await callback.message.edit_media(
            media=InputMediaPhoto(media=PHOTO_MAIN_MENU, caption=text),
            reply_markup=duel_stuck_keyboard()
        )
    
    balance = await db.get_user_balance(callback.from_user.id)
    stats = await db.get_user_duel_stats(callback.from_user.id)
    text = (
        f"‚ö° <b>–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¥—É—ç–ª–∏ 1x1</b> ‚ö°\n\n"
        f"–°—Ä–∞–∑–∏—Å—å —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º –¥–æ 2 –ø–æ–±–µ–¥ –∏ –∑–∞–±–µ—Ä–∏ –±–∞–Ω–∫!\n\n"
        f"<i>- –£ –∫–∞–∂–¥–æ–≥–æ 5 –∫–∞—Ä—Ç (–æ—Ç 1 –¥–æ 10).\n"
        f"- –í —Å–≤–æ–π —Ö–æ–¥ –º–æ–∂–Ω–æ 1 —Ä–∞–∑ —É—Å–∏–ª–∏—Ç—å –∫–∞—Ä—Ç—É (+1 —Å–∏–ª–∞ –∑–∞ 1‚≠ê) –∏–ª–∏ 1 —Ä–∞–∑ –∑–∞–º–µ–Ω–∏—Ç—å (2‚≠ê).\n"
        f"- –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —á—å—è –∫–∞—Ä—Ç–∞ —Å–∏–ª—å–Ω–µ–µ.</i>\n\n"
        f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} ‚≠ê\n"
        f"<b>–ü–æ–±–µ–¥/–ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> {stats['wins']}/{stats['losses']}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã:</b>"
    )
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_MAIN_MENU, caption=text),
        reply_markup=duel_stake_keyboard()
    )

@router.callback_query(F.data == "duel_rules")
async def duel_rules_handler(callback: CallbackQuery):
    rules_text = """
    üìú **–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥—É—ç–ª–∏** üìú

    ‚Ä¢ **–¶–µ–ª—å:** –ü–æ–±–µ–¥–∏—Ç—å –≤ 2 —Ä–∞—É–Ω–¥–∞—Ö (–∏–ª–∏ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –ø–æ–±–µ–¥ –∫ –∫–æ–Ω—Ü—É 5-–≥–æ —Ä–∞—É–Ω–¥–∞).
    ‚Ä¢ **–ö–∞—Ä—Ç—ã:** –í –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞ –≤–∞–º –≤—ã–¥–∞—ë—Ç—Å—è 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç —Å —Å–∏–ª–æ–π –æ—Ç 1 –¥–æ 10.
    ‚Ä¢ **–•–æ–¥:** –í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ –≤—ã –∏ –≤–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —á—å—è –∫–∞—Ä—Ç–∞ —Å–∏–ª—å–Ω–µ–µ. –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è.
    ‚Ä¢ **–£—Å–∏–ª–µ–Ω–∏–µ:** 1 —Ä–∞–∑ –∑–∞ —Ä–∞—É–Ω–¥ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å 1‚≠ê, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å +1 –∫ —Å–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.
    ‚Ä¢ **–ó–∞–º–µ–Ω–∞:** 1 —Ä–∞–∑ –∑–∞ —Ä–∞—É–Ω–¥ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å 2‚≠ê, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –Ω–∞ –Ω–æ–≤—É—é.
    ‚Ä¢ **–°–ø–µ—Ü–∫–∞—Ä—Ç—ã:** –í –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:
        - üå† **–ö–æ–º–µ—Ç–∞:** –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –æ–±—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–µ—Ä—ë—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—Å–µ–≥–æ –º–∞—Ç—á–∞.
        - üï≥Ô∏è **–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞:** –†–∞—É–Ω–¥ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è, –∫–∞—Ä—Ç—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è. –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞.
    ‚Ä¢ **–¢–∞–π–º–µ—Ä:** –ù–∞ –∫–∞–∂–¥—ã–π —Ö–æ–¥ –¥–∞—ë—Ç—Å—è 15 —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª ‚Äî —Ä–∞—É–Ω–¥ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ.
    """
    await callback.message.edit_caption(
        caption=rules_text,
        reply_markup=back_to_duels_keyboard()
    )

@router.callback_query(F.data.startswith("duel_stake:"))
async def find_duel_handler(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if await db.is_user_in_active_duel(user_id):
        return await callback.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏!", show_alert=True)

    stake = int(callback.data.split(":")[1])
    balance = await db.get_user_balance(user_id)
    if balance < stake:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return

    for s, data in duel_queue.items():
        if data['user_id'] == user_id:
            return await callback.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã.", show_alert=True)

    opponent_data = duel_queue.get(stake)
    if opponent_data and opponent_data['user_id'] != user_id:
        del duel_queue[stake]
        opponent_id = opponent_data['user_id']
        opponent_msg_id = opponent_data['msg_id']
        
        await callback.message.edit_caption(caption="‚úÖ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–±–±–∏...")
        await start_match(bot, opponent_id, user_id, stake, opponent_msg_id, callback.message.message_id)
    else:
        duel_queue[stake] = {'user_id': user_id, 'msg_id': callback.message.message_id}
        
        for i in range(45):
            if stake not in duel_queue or duel_queue[stake]['user_id'] != user_id:
                return
            try:
                await callback.message.edit_caption(
                    caption=f"üîé –ò—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å–æ —Å—Ç–∞–≤–∫–æ–π {stake} ‚≠ê{'.' * (i % 3 + 1)}"
                )
            except TelegramBadRequest:
                if duel_queue.get(stake, {}).get('user_id') == user_id: del duel_queue[stake]
                return
            await asyncio.sleep(1)

        if duel_queue.get(stake, {}).get('user_id') == user_id:
            del duel_queue[stake]
            await callback.message.edit_caption(
                caption=f"üòî –ù–∏–∫–æ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ —Å—Ç–∞–≤–∫–æ–π {stake} ‚≠ê.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É.",
                reply_markup=duel_stake_keyboard()
            )

@router.callback_query(F.data.startswith("duel_play:"))
async def duel_play_handler(callback: CallbackQuery, bot: Bot):
    try:
        _, match_id_str, card_value_str, original_value_str = callback.data.split(":")
        match_id, card_value, original_value = int(match_id_str), int(card_value_str), int(original_value_str)
    except ValueError:
        return await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    user_id = callback.from_user.id
    match = active_duels.get(match_id)
    if not match: return await callback.answer("–û—à–∏–±–∫–∞: –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)

    async with match.lock:
        card_to_find = original_value
        player_hand = match.p1_hand if user_id == match.p1_id else match.p2_hand
        for card in player_hand:
            if isinstance(card, tuple) and card[1] == original_value:
                card_to_find = card
                break

        if user_id == match.p1_id:
            if match.p1_choice is not None: return await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.")
            if card_to_find not in player_hand: return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã!")
            if match.p1_timer: match.p1_timer.cancel()
            match.p1_choice = card_value
            match.p1_hand.remove(card_to_find)
            await callback.message.edit_caption(caption="‚úÖ –í–∞—à —Ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
        elif user_id == match.p2_id:
            if match.p2_choice is not None: return await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.")
            if card_to_find not in match.p2_hand: return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã!")
            if match.p2_timer: match.p2_timer.cancel()
            match.p2_choice = card_value
            match.p2_hand.remove(card_to_find)
            await callback.message.edit_caption(caption="‚úÖ –í–∞—à —Ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
        else:
            return await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –º–∞—Ç—á.")
            
        await callback.answer()
        await resolve_round(bot, match_id)

@router.callback_query(F.data.startswith("duel_replace:"))
async def duel_replace_handler(callback: CallbackQuery, bot: Bot):
    match_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    match = active_duels.get(match_id)
    if not match: return

    async with match.lock:
        player_hand = match.p1_hand if user_id == match.p1_id else match.p2_hand
        player_replaces_left = match.p1_replace_left if user_id == match.p1_id else match.p2_replace_left
        if player_replaces_left < 1: return await callback.answer("–¢—ã —É–∂–µ –∑–∞–º–µ–Ω—è–ª –∫–∞—Ä—Ç—É –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", show_alert=True)
        
        balance = await db.get_user_balance(user_id)
        if balance < 2: return await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã (–Ω—É–∂–Ω–æ 2 ‚≠ê).", show_alert=True)

        await db.update_user_balance(user_id, -2)
        
        card_to_replace_options = list(player_hand)
        if not card_to_replace_options: return await callback.answer("–ù–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã.")

        card_to_replace = random.choice(card_to_replace_options)
        player_hand.remove(card_to_replace)
        
        current_hand_values = [c[1] if isinstance(c, tuple) else c for c in player_hand]
        possible_new_cards = [c for c in range(1, 11) if c not in current_hand_values]
        new_card = random.choice(possible_new_cards)
        player_hand.append(new_card)

        if user_id == match.p1_id: match.p1_replace_left = 0
        else: match.p2_replace_left = 0

        original_card_value = card_to_replace[1] if isinstance(card_to_replace, tuple) else card_to_replace
        await callback.answer(f"üîÑ –ö–∞—Ä—Ç–∞ {original_card_value} –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_card}!")
        await send_round_interface(bot, match)

@router.callback_query(F.data.startswith("duel_boost:"))
async def duel_boost_handler(callback: CallbackQuery, bot: Bot):
    match_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    match = active_duels.get(match_id)
    if not match: return
    
    async with match.lock:
        player_boosts_left = match.p1_boosts_left if user_id == match.p1_id else match.p2_boosts_left
        if player_boosts_left < 1: return await callback.answer("–£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É—Å–∏–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", show_alert=True)
        
        balance = await db.get_user_balance(user_id)
        if balance < 1: return await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è (–Ω—É–∂–Ω–æ 1 ‚≠ê).", show_alert=True)

        player_hand = match.p1_hand if user_id == match.p1_id else match.p2_hand
        await callback.message.edit_caption(
            caption="–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —É—Å–∏–ª–∏—Ç—å? (+1 –∫ —Å–∏–ª–µ –∑–∞ 1 ‚≠ê)",
            reply_markup=duel_boost_choice_keyboard(player_hand, match_id)
        )

@router.callback_query(F.data.startswith("duel_boost_choice:"))
async def duel_boost_choice_handler(callback: CallbackQuery, bot: Bot):
    _, match_id_str, card_str = callback.data.split(":")
    match_id, card_to_boost_original = int(match_id_str), int(card_str)
    user_id = callback.from_user.id
    match = active_duels.get(match_id)
    if not match: return
    
    async with match.lock:
        await db.update_user_balance(user_id, -1)
        player_hand = match.p1_hand if user_id == match.p1_id else match.p2_hand
        
        boosted_value = 0
        card_found = False
        for i, card in enumerate(player_hand):
            current_value = card[0] if isinstance(card, tuple) else card
            original_value = card[1] if isinstance(card, tuple) else card
            if original_value == card_to_boost_original:
                boosted_value = current_value + 1
                player_hand[i] = (boosted_value, original_value)
                card_found = True
                break
        
        if not card_found: return
                
        if user_id == match.p1_id: match.p1_boosts_left -= 1
        else: match.p2_boosts_left -= 1

        await callback.answer(f"‚ö° –ö–∞—Ä—Ç–∞ {card_to_boost_original} —É—Å–∏–ª–µ–Ω–∞ –¥–æ {boosted_value}!")
        await send_round_interface(bot, match)

@router.callback_query(F.data.startswith("duel_cancel_action:"))
async def duel_cancel_action_handler(callback: CallbackQuery, bot: Bot):
    match_id = int(callback.data.split(":")[1])
    match = active_duels.get(match_id)
    if not match: return
    await send_round_interface(bot, match)

@router.callback_query(F.data.startswith("duel_surrender:"))
async def duel_surrender_handler(callback: CallbackQuery):
    match_id = int(callback.data.split(":")[1])
    await callback.message.edit_caption(
        caption="–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–∞—Ç—å—Å—è? –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É.",
        reply_markup=duel_surrender_confirm_keyboard(match_id)
    )

@router.callback_query(F.data.startswith("duel_surrender_confirm:"))
async def duel_surrender_confirm_handler(callback: CallbackQuery, bot: Bot):
    match_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    match = active_duels.get(match_id)
    if not match: return

    async with match.lock:
        match.cancel_timers()
        await resolve_match(bot, match_id, surrendered_player_id=user_id)

@router.callback_query(F.data == "duel_leave_active")
async def duel_leave_active_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    match_id = await db.get_active_duel_id(user_id)
    
    if not match_id:
        await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)
        return await duel_menu_handler(callback, state)

    match = active_duels.get(match_id)
    if match:
        async with match.lock:
            match.cancel_timers()
            await resolve_match(bot, match_id, surrendered_player_id=user_id)
    else:
        await db.interrupt_duel(match_id)
        await callback.answer("–í–∞—à–∞ '–∑–∞–≤–∏—Å—à–∞—è' –∏–≥—Ä–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
        await duel_menu_handler(callback, state)

@router.callback_query(F.data.startswith("duel_rematch:"))
async def duel_rematch_handler(callback: CallbackQuery, bot: Bot):
    match_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    if match_id in rematch_offers:
        data = rematch_offers.pop(match_id)
        opponent_id = data['user_id']
        opponent_msg_id = data['msg_id']
        
        if opponent_id == user_id:
            rematch_offers[match_id] = data
            return await callback.answer("–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", show_alert=True)
        
        details = await db.get_duel_details(match_id)
        if details:
            p1, p2, stake = details
            
            await bot.edit_message_caption(chat_id=opponent_id, message_id=opponent_msg_id, caption="–°–æ–ø–µ—Ä–Ω–∏–∫ –ø—Ä–∏–Ω—è–ª —Ä–µ–≤–∞–Ω—à! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –±–æ–π...")
            await callback.message.edit_caption(caption="–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ–≤–∞–Ω—à! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –±–æ–π...")
            await start_match(bot, p1, p2, stake, opponent_msg_id, callback.message.message_id)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—à–ª–æ–≥–æ –º–∞—Ç—á–∞.", show_alert=True)
    else:
        rematch_offers[match_id] = {'user_id': user_id, 'msg_id': callback.message.message_id}
        await callback.message.edit_caption(caption="‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≤–∞–Ω—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")