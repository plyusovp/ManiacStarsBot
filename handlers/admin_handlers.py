# handlers/admin_handlers.py
import datetime
import html
import re
from typing import Union

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from config import settings
from database import db
from keyboards.inline import (
    admin_main_menu,
    admin_manage_menu,
    admin_promos_menu,
    admin_reward_details_menu,
    admin_rewards_menu,
    admin_user_info_menu,
)

router = Router()
router.message.filter(F.from_user.id.in_(settings.ADMIN_IDS))
router.callback_query.filter(F.from_user.id.in_(settings.ADMIN_IDS))


# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Broadcast(StatesGroup):
    waiting_for_message = State()


class Promo(StatesGroup):
    waiting_for_name = State()
    waiting_for_reward = State()
    waiting_for_uses = State()


class ManageBalance(StatesGroup):
    waiting_for_user = State()
    waiting_for_amount = State()
    is_debit = State()


class UserInfo(StatesGroup):
    waiting_for_user = State()


# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è FSM ---
@router.message(Command("cancel"))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await admin_panel_handler(message)


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@router.message(Command("admin"))
async def admin_panel_handler(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_menu()
    )


@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback_handler(
    callback_or_message: Union[CallbackQuery, Message],
):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!"
    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.message.edit_text(
            text, reply_markup=admin_main_menu()
        )
    else:
        await callback_or_message.answer(text, reply_markup=admin_main_menu())


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥ ---
@router.callback_query(F.data == "admin_rewards")
async def admin_rewards_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    page = 1
    limit = 5
    pending_rewards = await db.get_pending_rewards(page, limit)
    total_count = await db.get_pending_rewards_count()
    total_pages = (total_count + limit - 1) // limit

    text = f"‚è≥ –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ ({total_count} —à—Ç.)\n\n"
    if not pending_rewards:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
    else:
        for reward in pending_rewards:
            text += (
                f"üîπ /reward_{reward['id']} –æ—Ç @{reward['username']} "
                f"({reward['stars_cost']} ‚≠ê) - {reward['created_at']}\n"
            )

    await callback.message.edit_text(
        text, reply_markup=admin_rewards_menu(page, total_pages)
    )


@router.callback_query(F.data.startswith("admin_rewards_page_"))
async def admin_rewards_page_handler(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    limit = 5
    pending_rewards = await db.get_pending_rewards(page, limit)
    total_count = await db.get_pending_rewards_count()
    total_pages = (total_count + limit - 1) // limit

    text = f"‚è≥ –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ ({total_count} —à—Ç.)\n\n"
    if not pending_rewards:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
    else:
        for reward in pending_rewards:
            text += (
                f"üîπ /reward_{reward['id']} –æ—Ç @{reward['username']} "
                f"({reward['stars_cost']} ‚≠ê) - {reward['created_at']}\n"
            )

    await callback.message.edit_text(
        text, reply_markup=admin_rewards_menu(page, total_pages)
    )


@router.message(Command(re.compile(r"reward_\d+")))
async def reward_details_command_handler(message: Message, state: FSMContext):
    try:
        reward_id = int(message.text.split("_")[1])
    except (ValueError, IndexError):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

    details = await db.get_reward_full_details(reward_id)
    if not details:
        return await message.answer(f"–ó–∞—è–≤–∫–∞ #{reward_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    reward = details["reward"]
    user_id = reward["user_id"]
    user_details = await db.get_user_full_details_for_admin(user_id)

    ledger_text = "\n".join(
        [
            f"‚Ä¢ {l['amount']}‚≠ê –∑–∞ `{l['reason']}` ({l['created_at']})"
            for l in user_details["ledger"]
        ]
    )

    text = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #{reward_id}</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{reward['username']} (<code>{user_id}</code>)\n"
        f"<b>–ò–º—è:</b> {html.escape(user_details['user_data']['full_name'])}\n"
        f"<b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {reward['status']}\n"
        f"<b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> {reward['item_id']} –∑–∞ {reward['stars_cost']} ‚≠ê\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {reward['created_at']}\n\n"
        f"<b>–ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞:</b> {user_details['user_data']['balance']} ‚≠ê\n"
        f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_details['user_data']['created_at']}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {user_details['user_data']['risk_level']}\n\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n{ledger_text}"
    )

    await message.answer(
        text, reply_markup=admin_reward_details_menu(reward_id, user_id)
    )


@router.callback_query(F.data.startswith("admin_reward_"))
async def reward_action_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split("_")
    action = parts[2]
    reward_id = int(parts[3])
    admin_id = callback.from_user.id

    details = await db.get_reward_full_details(reward_id)
    if not details:
        return await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    user_id = details["reward"]["user_id"]
    username = details["reward"]["username"]

    success = False
    notify_text = ""

    if action == "approve":
        success = await db.approve_reward(reward_id, admin_id)
        notify_text = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{reward_id} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏."
    elif action == "reject":
        success = await db.reject_reward(
            reward_id, admin_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        notify_text = f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{reward_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ó–≤—ë–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
    elif action == "fulfill":
        success = await db.fulfill_reward(reward_id, admin_id)
        notify_text = f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{reward_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."

    if success:
        await callback.answer(
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{reward_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{action}'.", show_alert=True
        )
        try:
            await bot.send_message(user_id, notify_text)
        except Exception as e:
            await callback.message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}"
            )
        await admin_rewards_handler(callback, state)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    else:
        await callback.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.", show_alert=True
        )


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ ---
@router.callback_query(F.data == "admin_promos")
async def admin_promos_handler(callback: CallbackQuery):
    promos = await db.get_active_promos()
    text = "üéüÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"
    if not promos:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
    else:
        for code, reward, left, total in promos:
            text += f"`{code}` ‚Äî {reward} ‚≠ê (–æ—Å—Ç–∞–ª–æ—Å—å {left}/{total})\n"

    await callback.message.edit_text(text, reply_markup=admin_promos_menu())


@router.callback_query(F.data == "admin_promo_create")
async def admin_promo_create_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `NEWYEAR2024`).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    await state.set_state(Promo.waiting_for_name)


@router.message(Promo.waiting_for_name)
async def process_promo_name(message: Message, state: FSMContext):
    await state.update_data(promo_name=message.text.strip().upper())
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –¥–∞—ë—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, `10`).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    await state.set_state(Promo.waiting_for_reward)


@router.message(Promo.waiting_for_reward)
async def process_promo_reward(message: Message, state: FSMContext):
    try:
        reward = int(message.text)
        if reward <= 0:
            raise ValueError
        await state.update_data(promo_reward=reward)
        await message.answer(
            "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, `100`).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        await state.set_state(Promo.waiting_for_uses)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(Promo.waiting_for_uses)
async def process_promo_uses(message: Message, state: FSMContext):
    try:
        uses = int(message.text)
        if uses <= 0:
            raise ValueError
        data = await state.get_data()
        name = data["promo_name"]
        reward = data["promo_reward"]

        await db.add_promo_code(name, reward, uses)
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ `{name}` –Ω–∞ {reward} ‚≠ê ({uses} –∞–∫—Ç–∏–≤–∞—Ü–∏–π) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
        )
        await state.clear()
        await admin_panel_handler(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
@router.callback_query(F.data == "admin_manage")
async def admin_manage_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_manage_menu()
    )


@router.callback_query(F.data.in_({"admin_grant", "admin_debit"}))
async def manage_balance_start(callback: CallbackQuery, state: FSMContext):
    is_debit = callback.data == "admin_debit"
    await state.update_data(is_debit=is_debit)
    action_word = "—Å–ø–∏—Å–∞–Ω–∏—è" if is_debit else "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action_word}:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    await state.set_state(ManageBalance.waiting_for_user)


@router.message(ManageBalance.waiting_for_user)
async def process_manage_user(message: Message, state: FSMContext, bot: Bot):
    user_input = message.text.strip()
    user_id = None
    if user_input.isdigit():
        user_id = int(user_input)
    elif user_input.startswith("@"):
        user_id = await db.get_user_by_username(user_input[1:])

    if not user_id:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å /start –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        return

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É ---
    try:
        user_exists = await db.get_full_user_info(user_id)
        if not user_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –ë–î, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
            chat = await bot.get_chat(user_id)
            # –ò –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.add_user(
                user_id=chat.id, username=chat.username, full_name=chat.full_name
            )
            await message.answer(
                f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{chat.username}."
            )
    except Exception as e:
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É. –û—à–∏–±–∫–∞: {e}\n\n"
            f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
        )
        return
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    await state.update_data(target_user_id=user_id)
    await message.answer(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    await state.set_state(ManageBalance.waiting_for_amount)


@router.message(ManageBalance.waiting_for_amount)
async def process_manage_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    user_id = data["target_user_id"]
    is_debit = data["is_debit"]
    admin_id = message.from_user.id

    if is_debit:
        success = await db.spend_balance(
            user_id, amount, "admin_debit", ref_id=str(admin_id)
        )
        if success:
            await message.answer(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` —Å–ø–∏—Å–∞–Ω–æ {amount} ‚≠ê.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        await db.add_balance_unrestricted(
            user_id, amount, "admin_grant", ref_id=str(admin_id)
        )
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê.")

    await state.clear()
    await admin_panel_handler(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é


# --- –ù–û–í–û–ï: –†–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    stats = await db.get_bot_statistics()
    text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
        f"üå± –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{stats['new_today']}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{stats['new_week']}</b>\n"
        f"üèÉ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: <b>{stats['active_day']}</b>\n"
        f"üí∞ –í—Å–µ–≥–æ –∑–≤—ë–∑–¥ –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{stats['total_balance']}</b> ‚≠ê"
    )
    await callback.message.edit_text(text, reply_markup=admin_main_menu())


# --- –ù–û–í–û–ï: –†–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
@router.callback_query(F.data == "admin_user_info")
async def admin_user_info_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
    )
    await state.set_state(UserInfo.waiting_for_user)


@router.callback_query(F.data.startswith("admin_user_info_"))
async def admin_user_info_from_reward(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await process_user_info_request(user_id, callback, state)


@router.message(UserInfo.waiting_for_user)
async def process_user_info_search(message: Message, state: FSMContext):
    user_input = message.text.strip()
    user_id = None
    if user_input.isdigit():
        user_id = int(user_input)
    elif user_input.startswith("@"):
        user_id = await db.get_user_by_username(user_input[1:])

    if not user_id:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        return

    await process_user_info_request(user_id, message, state)


async def process_user_info_request(
    user_id: int, message_or_callback: Union[Message, CallbackQuery], state: FSMContext
):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    details = await db.get_user_full_details_for_admin(user_id)
    if not details:
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.", show_alert=True
            )
        else:
            await message_or_callback.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
            )
        return

    udata = details["user_data"]
    reg_date = datetime.datetime.fromtimestamp(udata["registration_date"]).strftime(
        "%Y-%m-%d %H:%M"
    )
    last_seen_date = datetime.datetime.fromtimestamp(udata["last_seen"]).strftime(
        "%Y-%m-%d %H:%M"
    )

    ledger_text = "\n".join(
        [
            f"‚Ä¢ {l['amount']:+d}‚≠ê –∑–∞ `{l['reason']}` ({l['created_at']})"
            for l in details["ledger"]
        ]
    )
    if not ledger_text:
        ledger_text = "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."

    text = (
        f"<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"<b>ID:</b> <code>{udata['user_id']}</code>\n"
        f"<b>Username:</b> @{udata['username']}\n"
        f"<b>–ò–º—è:</b> {html.escape(udata['full_name'])}\n"
        f"<b>–ë–∞–ª–∞–Ω—Å:</b> {udata['balance']} ‚≠ê\n\n"
        f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_seen_date}\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—Å–∏–ª:</b> {details['referrals_count']} —á–µ–ª.\n"
        f"<b>–î—É—ç–ª–∏ (–í/–ü):</b> {details['duel_stats']['wins']}/{details['duel_stats']['losses']}\n\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n{ledger_text}"
    )

    await state.clear()

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            text, reply_markup=admin_user_info_menu()
        )
    else:
        await message_or_callback.answer(text, reply_markup=admin_user_info_menu())
