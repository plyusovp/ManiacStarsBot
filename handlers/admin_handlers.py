# handlers/admin_handlers.py
import datetime
import html
import logging
from typing import Any, Optional

from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from config import ADMIN_IDS
from database import db

# --- Router & filters ---
router = Router()
# –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
router.message.filter(F.from_user.id.in_(ADMIN_IDS))
logger = logging.getLogger(__name__)

# --- Constants ---
REG_DT_FORMAT = "%Y-%m-%d %H:%M:%S"


# --- Helpers ---
async def get_user_id(arg: str) -> Optional[int]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã –≤ user_id."""
    if not arg:
        return None
    token = arg.strip().split(maxsplit=1)[0]
    if token.isdigit():
        return int(token)

    username = token.replace("@", "").strip()
    if not username:
        return None

    try:
        return await db.get_user_by_username(username)
    except Exception:
        logger.exception("Failed to fetch user_id for username: %s", username)
        return None


def safe_format_ts(ts: Any) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —Å—Ç—Ä–æ–∫—É."""
    try:
        ts_int = int(ts)
        if ts_int <= 0:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        dt = datetime.datetime.fromtimestamp(ts_int)
        return dt.strftime(REG_DT_FORMAT)
    except (ValueError, TypeError, OSError, OverflowError):
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def _escape_or_na(value: Any, na_text: str = "–Ω–µ —É–∫–∞–∑–∞–Ω") -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è HTML. –ü—É—Å—Ç—ã–µ/None -> '–Ω–µ —É–∫–∞–∑–∞–Ω'."""
    if value is None:
        return na_text
    s = str(value).strip()
    return html.escape(s) if s else na_text


def _format_username(value: Any) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç username."""
    raw = str(value or "").strip().lstrip("@")
    if not raw:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω"
    return f"@{html.escape(raw)}"


# --- Handlers ---
@router.message(Command("info"))
async def get_user_info_handler(
    message: Message, command: CommandObject, bot: Bot
) -> None:
    """/info <id|@username> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä: `/info 12345678` –∏–ª–∏ `/info @username`"
        )
        return

    user_to_find = await get_user_id(command.args)
    if not user_to_find:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    if user_to_find == message.from_user.id:
        await db.grant_achievement(message.from_user.id, "meta", bot)

    try:
        info = await db.get_full_user_info(user_to_find)
    except Exception:
        logger.exception("get_full_user_info failed for user_id: %s", user_to_find)
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ `{user_to_find}`."
        )
        return

    if not info or not info.get("user_data"):
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ `{user_to_find}`."
        )
        return

    user_data = info["user_data"]
    invited_users = info.get("invited_users", [])
    activated_codes = info.get("activated_codes", [])

    reg_date = safe_format_ts(user_data[5])
    duel_wins = user_data[7]
    duel_losses = user_data[8]

    text = "\n".join(
        [
            "‚ÑπÔ∏è <b>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>",
            "",
            f"<b>ID:</b> <code>{user_data[0]}</code>",
            f"<b>Username:</b> {_format_username(user_data[1])}",
            f"<b>Full Name:</b> {_escape_or_na(user_data[2])}",
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_data[3]} ‚≠ê",
            "",
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}",
            f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω –æ—Ç:</b> {_escape_or_na(user_data[4], '–ù–∏–∫—Ç–æ')}",
            "",
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
            f"- –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(invited_users)}",
            f"- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(activated_codes)}",
            f"- –î—É—ç–ª–∏ (–ü–æ–±–µ–¥/–ü–æ—Ä–∞–∂–µ–Ω–∏–π): {duel_wins}/{duel_losses}",
        ]
    )
    await message.answer(text)


@router.message(Command("addpromo"))
async def add_promo_handler(message: Message, command: CommandObject) -> None:
    """/addpromo <NAME> <REWARD:int> <USES:int>"""
    if not command.args or len(command.args.split()) != 3:
        await message.answer(
            "–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n`/addpromo –ù–ê–ó–í–ê–ù–ò–ï –ù–ê–ì–†–ê–î–ê –ö–û–õ–ò–ß–ï–°–¢–í–û`\n"
            "–ü—Ä–∏–º–µ—Ä: `/addpromo HELLO5 5 100`"
        )
        return

    name, reward_str, uses_str = command.args.split()
    try:
        reward = int(reward_str)
        uses = int(uses_str)
        if reward <= 0 or uses < 0:
            raise ValueError("Reward and uses must be positive.")
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞. –ù–∞–≥—Ä–∞–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏."
        )
        return

    try:
        await db.add_promo_code(name.upper(), reward, uses)
    except Exception:
        logger.exception("add_promo_code failed")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î.")
        return

    await message.answer(
        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{html.escape(name.upper())}</code> "
        f"–Ω–∞ {reward} ‚≠ê ({uses} –∞–∫—Ç–∏–≤–∞—Ü–∏–π) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    )


@router.message(Command("addstar"))
async def add_star_handler(message: Message, command: CommandObject) -> None:
    """/addstar <id|@username> <AMOUNT:int>"""
    if not command.args or len(command.args.split()) != 2:
        await message.answer(
            "–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: `/addstar <ID –∏–ª–∏ @username> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`"
        )
        return

    user_arg, amount_str = command.args.split()
    try:
        user_id = await get_user_id(user_arg)
        if not user_id:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        amount = int(amount_str)
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    except Exception:
        logger.exception("Failed to parse args in add_star")
        await message.answer("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")
        return

    try:
        await db.add_stars(user_id, amount)
    except Exception:
        logger.exception("add_stars failed")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –∑–≤—ë–∑–¥—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î.")
        return

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê.")


@router.message(Command("addref"))
async def add_ref_handler(message: Message, command: CommandObject) -> None:
    """/addref <id|@username> <AMOUNT:int> - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û"""
    await message.answer(
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ `add_refs` –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞."
    )


@router.message(Command("activepromo"))
async def active_promo_handler(message: Message) -> None:
    """/activepromo ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    try:
        promos = await db.get_active_promos()
    except Exception:
        logger.exception("get_active_promos failed")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        return

    if not promos:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç.")
        return

    lines = ["üéüÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>", ""]
    for code, reward, uses_left, total_uses in promos:
        lines.append(
            f"<code>{html.escape(str(code))}</code> ‚Äî <b>{reward} ‚≠ê</b> "
            f"(–æ—Å—Ç–∞–ª–æ—Å—å {uses_left}/{total_uses})"
        )
    await message.answer("\n".join(lines))
