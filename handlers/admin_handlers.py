# handlers/admin_handlers.py
import datetime
import time
import random
from typing import Union
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject

from config import ADMIN_IDS
import database.db as db

router = Router()
# –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º, –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
router.message.filter(F.from_user.id.in_(ADMIN_IDS))

async def get_user_id(arg: str) -> Union[int, None]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ ID."""
    if arg.isdigit():
        return int(arg)
    else:
        username = arg.replace('@', '').strip()
        return await db.get_user_by_username(username)

@router.message(Command("info"))
async def get_user_info_handler(message: Message, command: CommandObject, bot: Bot):
    if not command.args:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n–ü—Ä–∏–º–µ—Ä: `/info 12345678` –∏–ª–∏ `/info @username`")
        return

    user_to_find = await get_user_id(command.args)
    if not user_to_find:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
        
    # –í—ã–¥–∞—ë–º —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∞—á–∏–≤–∫—É, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–º —Å–µ–±—è
    if user_to_find == message.from_user.id:
        await db.grant_achievement(message.from_user.id, 'meta', bot)
        
    info = await db.get_full_user_info(user_to_find)
    if not info:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID `{user_to_find}`.")
        return

    user_data, invited_users, activated_codes = info.values()
    
    reg_date = datetime.datetime.fromtimestamp(user_data[5]).strftime('%Y-%m-%d %H:%M:%S')
    
    duel_wins = user_data[7]
    duel_losses = user_data[8]

    text = f"""
‚ÑπÔ∏è <b>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

<b>ID:</b> <code>{user_data[0]}</code>
<b>Username:</b> @{user_data[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>Full Name:</b> {user_data[2]}
<b>–ë–∞–ª–∞–Ω—Å:</b> {user_data[3]} ‚≠ê

<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}
<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω –æ—Ç:</b> {user_data[4] if user_data[4] else '–ù–∏–∫—Ç–æ'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(invited_users)}
- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(activated_codes)}
- –î—É—ç–ª–∏ (–ü–æ–±–µ–¥/–ü–æ—Ä–∞–∂–µ–Ω–∏–π): {duel_wins}/{duel_losses}

<b>–ü—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
<code>{', '.join(map(str, invited_users)) if invited_users else '–ù–∏–∫–æ–≥–æ'}</code>

<b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>
<code>{', '.join(activated_codes) if activated_codes else '–ù–µ—Ç'}</code>
"""
    await message.answer(text)


@router.message(Command("addpromo"))
async def add_promo_handler(message: Message, command: CommandObject):
    if not command.args or len(command.args.split()) != 3:
        await message.answer(
            "–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: \n`/addpromo –ù–ê–ó–í–ê–ù–ò–ï –ù–ê–ì–†–ê–î–ê –ö–û–õ–ò–ß–ï–°–¢–í–û`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/addpromo HELLO5 5 100`"
        )
        return

    try:
        name, reward_str, uses_str = command.args.split()
        reward = int(reward_str)
        uses = int(uses_str)
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö. –ù–∞–≥—Ä–∞–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: `/addpromo HELLO5 5 100`"
        )
        return

    await db.add_promo_code(name.upper(), reward, uses)
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{name.upper()}</code> –Ω–∞ {reward} ‚≠ê ({uses} –∞–∫—Ç–∏–≤–∞—Ü–∏–π) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")


@router.message(Command("addstar"))
async def add_star_handler(message: Message, command: CommandObject):
    if not command.args or len(command.args.split()) != 2:
        await message.answer("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: `/addstar <ID –∏–ª–∏ @username> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`")
        return
    
    user_arg, amount_str = command.args.split()
    user_id = await get_user_id(user_arg)
    
    if not user_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    try:
        amount = int(amount_str)
        await db.add_stars(user_id, amount)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê.")
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

@router.message(Command("addref"))
async def add_ref_handler(message: Message, command: CommandObject):
    if not command.args or len(command.args.split()) != 2:
        await message.answer("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: `/addref <ID –∏–ª–∏ @username> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`")
        return

    user_arg, amount_str = command.args.split()
    user_id = await get_user_id(user_arg)

    if not user_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    try:
        amount = int(amount_str)
        await db.add_refs(user_id, amount)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

@router.message(Command("activepromo"))
async def active_promo_handler(message: Message):
    promos = await db.get_active_promos()
    if not promos:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç.")
        return
    
    text = "üéüÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
    for code, reward, uses_left, total_uses in promos:
        text += f"<code>{code}</code> ‚Äî <b>{reward} ‚≠ê</b> (–æ—Å—Ç–∞–ª–æ—Å—å {uses_left}/{total_uses})\n"
        
    await message.answer(text)