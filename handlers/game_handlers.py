# handlers/game_handlers.py
import random

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InputMediaPhoto, Message

from config import PHOTO_ACHIEVEMENTS, PHOTO_MAIN_MENU
from database import db
from handlers.utils import clean_junk_message
from keyboards.inline import (achievements_menu_keyboard,
                              coinflip_bet_keyboard, coinflip_choice_keyboard,
                              coinflip_continue_keyboard,
                              entertainment_menu_keyboard)

router = Router()


# --- FSM –¥–ª—è –ò–≥—Ä—ã "–û—Ä—ë–ª –∏ –†–µ—à–∫–∞" ---
class CoinflipGame(StatesGroup):
    in_game = State()


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –∏–≥—Ä—ã ---
COINFLIP_LEVELS = {
    1: {"chance": 50, "prize_mult": 2},
    2: {"chance": 43, "prize_mult": 1.7},
    3: {"chance": 35, "prize_mult": 1.5},
    4: {"chance": 25, "prize_mult": 1.8},
    5: {"chance": 15, "prize_mult": 2},
    6: {"chance": 5, "prize_mult": 3},
}


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def safe_edit_media(message: Message, media: InputMediaPhoto, reply_markup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫—É 'not modified'."""
    try:
        await message.edit_media(media=media, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            print(f"Unhandled TelegramBadRequest in safe_edit_media: {e}")
    except Exception as e:
        print(f"Unexpected error in safe_edit_media: {e}")


def format_time(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É '–ß—á –ú–º –°—Å'."""
    if seconds < 0:
        return "0—Å"
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    elif minutes > 0:
        return f"{minutes}–º {secs}—Å"
    else:
        return f"{secs}—Å"


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@router.message(Command("bonus"))
async def bonus_handler(message: Message, state: FSMContext, bot: Bot) -> None:
    user_id = message.from_user.id
    try:
        result = await db.get_daily_bonus(user_id)

        response_text = ""
        if result["status"] == "success":
            response_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ <b>{result['reward']} ‚≠ê</b>!"
            await db.grant_achievement(user_id, "bonus_hunter", bot)
        elif result["status"] == "wait":
            time_left = format_time(result["seconds_left"])
            response_text = f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ <b>{time_left}</b>."
        else:
            response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        reply = await message.answer(response_text)
        await state.update_data(junk_message_id=reply.message_id)
    except Exception as e:
        print(f"Error in bonus_handler: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞.")


@router.callback_query(F.data == "entertainment_menu")
async def entertainment_menu_handler(
    callback: CallbackQuery, state: FSMContext
) -> None:
    await clean_junk_message(callback, state)
    text = "üëæ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b> üëæ\n\n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –Ω–∞—à–∏ –∏–≥—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í—ã–±–∏—Ä–∞–π, –≤–æ —á—Ç–æ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å!"
    await safe_edit_media(
        callback.message,
        media=InputMediaPhoto(media=PHOTO_MAIN_MENU, caption=text, parse_mode="HTML"),
        reply_markup=entertainment_menu_keyboard(),
    )


# --- –ò–ì–†–ê "–û–†–Å–õ –ò –†–ï–®–ö–ê" ---
@router.callback_query(F.data == "game_coinflip")
async def start_coinflip_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await clean_junk_message(callback, state)
    balance = await db.get_user_balance(callback.from_user.id)
    text = f"ü™ô <b>–û—Ä—ë–ª –∏ –†–µ—à–∫–∞: –†–∏—Å–∫–Ω–∏ –∏ –£–¥–≤–æ–π!</b> ü¶Ö\n\n–î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —É–≥–∞–¥—ã–≤–∞–π —Å—Ç–æ—Ä–æ–Ω—É –∏ —Ä–µ—à–∞–π: –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –∏–ª–∏ —Ä–∏—Å–∫–Ω—É—Ç—å —Ä–∞–¥–∏ –±–æ–ª—å—à–µ–≥–æ –ø—Ä–∏–∑–∞?\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É:</b>"

    await safe_edit_media(
        callback.message,
        media=InputMediaPhoto(media=PHOTO_MAIN_MENU, caption=text, parse_mode="HTML"),
        reply_markup=coinflip_bet_keyboard(),
    )


@router.callback_query(F.data.startswith("coinflip_bet:"))
async def bet_coinflip_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await clean_junk_message(callback, state)
    bet = int(callback.data.split(":")[1])

    ok = await db.update_user_balance(callback.from_user.id, -bet)
    if not ok:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return

    await state.set_state(CoinflipGame.in_game)
    await state.update_data(initial_bet=bet, current_pot=bet, level=1)

    text = f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ <b>{bet} ‚≠ê</b>.\n\n–ö—É–¥–∞ —É–ø–∞–¥—ë—Ç –º–æ–Ω–µ—Ç–∞?"
    await callback.message.edit_caption(
        caption=text, reply_markup=coinflip_choice_keyboard()
    )


@router.callback_query(CoinflipGame.in_game, F.data.startswith("coinflip_play:"))
async def play_coinflip_handler(callback: CallbackQuery, state: FSMContext) -> None:
    user_choice = callback.data.split(":")[1]

    game_data = await state.get_data()
    level = game_data.get("level", 1)
    current_pot = game_data.get("current_pot")

    level_config = COINFLIP_LEVELS.get(level)
    if not level_config:
        await callback.answer(
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ó–∞–±–∏—Ä–∞–π—Ç–µ –≤—ã–∏–≥—Ä—ã—à.", show_alert=True
        )
        await cashout_coinflip_handler(callback, state)
        return

    win_chance = level_config["chance"]
    prize_mult = level_config["prize_mult"]

    is_win = random.randint(1, 100) <= win_chance
    result = user_choice if is_win else ("tails" if user_choice == "heads" else "heads")
    result_emoji = "ü¶Ö" if result == "heads" else "ü™ô"

    if is_win:
        new_pot = int(current_pot * prize_mult)
        await state.update_data(current_pot=new_pot, level=level + 1)
        next_level_chance = COINFLIP_LEVELS.get(level + 1, {}).get("chance", 0)

        text = f"–í—ã–ø–∞–ª {result_emoji}! **–í—ã —É–≥–∞–¥–∞–ª–∏!**\n\n–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–∂–µ <b>{new_pot} ‚≠ê</b>.\n\n–•–æ—Ç–∏—Ç–µ —Ä–∏—Å–∫–Ω—É—Ç—å –µ—â—ë —Ä–∞–∑? –®–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ: <b>{next_level_chance}%</b>"
        await callback.message.edit_caption(
            caption=text, reply_markup=coinflip_continue_keyboard(new_pot)
        )
    else:
        initial_bet = game_data.get("initial_bet", 0)
        text = f"–í—ã–ø–∞–ª {result_emoji}! **–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...**\n\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ <b>{initial_bet} ‚≠ê</b> —Å–≥–æ—Ä–µ–ª–∞."
        await state.clear()
        await callback.message.edit_caption(
            caption=text, reply_markup=coinflip_bet_keyboard()
        )
        await callback.answer("–ù–µ –ø–æ–≤–µ–∑–ª–æ!", show_alert=True)


@router.callback_query(CoinflipGame.in_game, F.data == "coinflip_continue")
async def continue_coinflip_handler(callback: CallbackQuery, state: FSMContext) -> None:
    game_data = await state.get_data()
    level = game_data.get("level", 1)
    await callback.message.edit_caption(
        caption=f"–†–∏—Å–∫ ‚Äî –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–µ –¥–µ–ª–æ! –®–∞–Ω—Å —É–≥–∞–¥–∞—Ç—å: {COINFLIP_LEVELS.get(level, {}).get('chance', 0)}%\n–ö—É–¥–∞ —É–ø–∞–¥—ë—Ç –º–æ–Ω–µ—Ç–∞?",
        reply_markup=coinflip_choice_keyboard(),
    )


@router.callback_query(CoinflipGame.in_game, F.data == "coinflip_cashout")
async def cashout_coinflip_handler(callback: CallbackQuery, state: FSMContext) -> None:
    game_data = await state.get_data()
    prize = game_data.get("current_pot", 0)

    await db.update_user_balance(callback.from_user.id, prize)

    await callback.answer(f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ {prize} ‚≠ê.", show_alert=True)
    await state.clear()
    await start_coinflip_handler(callback, state)


@router.callback_query(F.data == "game_coinflip_cancel")
async def cancel_coinflip_handler(callback: CallbackQuery, state: FSMContext) -> None:
    if (await state.get_state()) == CoinflipGame.in_game.state:
        # –°—Ç–∞–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ —Å–≥–æ—Ä–∞–µ—Ç
        await callback.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–≥—Ä—É, –≤–∞—à–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞.", show_alert=True
        )

    await state.clear()
    await start_coinflip_handler(callback, state)


# --- –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
@router.callback_query(F.data == "achievements_menu")
async def achievements_menu_handler(
    callback: CallbackQuery, state: FSMContext, bot: Bot
) -> None:
    await clean_junk_message(callback, state)
    user_id = callback.from_user.id
    try:
        all_ach = await db.get_all_achievements()
        user_ach = await db.get_user_achievements(user_id)
    except Exception as e:
        print(f"Error loading achievements: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.", show_alert=True)
        return

    text = "–í—ã–ø–æ–ª–Ω—è–π <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> –∏ –ø–æ–ª—É—á–∞–π –∂–∏—Ä–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! üèÜ"
    await safe_edit_media(
        callback.message,
        media=InputMediaPhoto(
            media=PHOTO_ACHIEVEMENTS, caption=text, parse_mode="HTML"
        ),
        reply_markup=achievements_menu_keyboard(all_ach, user_ach, page=1),
    )


@router.callback_query(F.data.startswith("achievements_page:"))
async def achievements_page_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await clean_junk_message(callback, state)
    try:
        page = int(callback.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return

    user_id = callback.from_user.id
    try:
        all_ach = await db.get_all_achievements()
        user_ach = await db.get_user_achievements(user_id)
    except Exception as e:
        print(f"Error loading achievements page: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.", show_alert=True)
        return

    try:
        await callback.message.edit_reply_markup(
            reply_markup=achievements_menu_keyboard(all_ach, user_ach, page=page)
        )
    except TelegramBadRequest:
        pass


# --- –ó–ê–ì–õ–£–®–ö–ò ---
@router.callback_query(F.data == "game_casino")
async def game_stubs_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await clean_junk_message(callback, state)
    await callback.answer("–°–∫–æ—Ä–æ... ü§´", show_alert=True)


@router.callback_query(F.data == "ignore_click")
async def ignore_click_handler(callback: CallbackQuery) -> None:
    await callback.answer("–≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –í—ã–ø–æ–ª–Ω—è–π —Ü–µ–ª–∏, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å!")
