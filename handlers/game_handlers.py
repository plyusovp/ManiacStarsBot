# handlers/game_handlers.py
import random
import asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

import database.db as db
from keyboards.inline import (
    achievements_menu_keyboard, entertainment_menu_keyboard, 
    coinflip_bet_keyboard, coinflip_choice_keyboard, coinflip_continue_keyboard
)
from config import PHOTO_ACHIEVEMENTS, PHOTO_MAIN_MENU
from handlers.menu_handler import show_main_menu
from .utils import clean_junk_message # üî• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

router = Router()

# --- FSM –¥–ª—è –ò–≥—Ä—ã "–û—Ä—ë–ª –∏ –†–µ—à–∫–∞" ---
class CoinflipGame(StatesGroup):
    in_game = State()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –∏–≥—Ä—ã ---
COINFLIP_LEVELS = {
    1: {"chance": 50, "prize_mult": 2},
    2: {"chance": 43, "prize_mult": 1.7},
    3: {"chance": 35, "prize_mult": 1.5},
    4: {"chance": 25, "prize_mult": 1.8},
    5: {"chance": 15, "prize_mult": 2},
    6: {"chance": 5,  "prize_mult": 3},
}

def format_time(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É '–ß—á –ú–º –°—Å'."""
    if seconds < 0:
        return "0—Å"
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    elif minutes > 0:
        return f"{minutes}–º {secs}—Å"
    else:
        return f"{secs}—Å"

# --- –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° ---
@router.message(Command("bonus"))
async def bonus_handler(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    result = await db.get_daily_bonus(user_id)
    
    response_text = ""
    if result['status'] == 'success':
        response_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ <b>{result['reward']} ‚≠ê</b>!"
        await db.grant_achievement(user_id, 'bonus_hunter', bot)
    elif result['status'] == 'wait':
        time_left = format_time(result['seconds_left'])
        response_text = f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ <b>{time_left}</b>."
    else:
        response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    reply = await message.answer(response_text)
    await state.update_data(junk_message_id=reply.message_id)

# --- –†–ê–ó–î–ï–õ "–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø" ---
@router.callback_query(F.data == "entertainment_menu")
async def entertainment_menu_handler(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    text = "üëæ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b> üëæ\n\n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –Ω–∞—à–∏ –∏–≥—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í—ã–±–∏—Ä–∞–π, –≤–æ —á—Ç–æ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å!"
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_MAIN_MENU, caption=text), 
        reply_markup=entertainment_menu_keyboard()
    )

# --- –ò–ì–†–ê "–û–†–Å–õ –ò –†–ï–®–ö–ê" ---
@router.callback_query(F.data == "game_coinflip")
async def start_coinflip_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await clean_junk_message(callback, state)
    balance = await db.get_user_balance(callback.from_user.id)
    text = f"ü™ô <b>–û—Ä—ë–ª –∏ –†–µ—à–∫–∞: –†–∏—Å–∫–Ω–∏ –∏ –£–¥–≤–æ–π!</b> ü¶Ö\n\n–î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —É–≥–∞–¥—ã–≤–∞–π —Å—Ç–æ—Ä–æ–Ω—É –∏ —Ä–µ—à–∞–π: –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –∏–ª–∏ —Ä–∏—Å–∫–Ω—É—Ç—å —Ä–∞–¥–∏ –±–æ–ª—å—à–µ–≥–æ –ø—Ä–∏–∑–∞?\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É:</b>"
    
    await callback.message.edit_caption(caption=text, reply_markup=coinflip_bet_keyboard())

@router.callback_query(F.data.startswith("coinflip_bet:"))
async def bet_coinflip_handler(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    bet = int(callback.data.split(":")[1])
    balance = await db.get_user_balance(callback.from_user.id)

    if balance < bet:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return

    await state.set_state(CoinflipGame.in_game)
    await state.update_data(
        initial_bet=bet,
        current_pot=bet,
        level=1
    )
    
    text = f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ <b>{bet} ‚≠ê</b>.\n\n–ö—É–¥–∞ —É–ø–∞–¥—ë—Ç –º–æ–Ω–µ—Ç–∞?"
    await callback.message.edit_caption(caption=text, reply_markup=coinflip_choice_keyboard())

@router.callback_query(CoinflipGame.in_game, F.data.startswith("coinflip_play:"))
async def play_coinflip_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_choice = callback.data.split(":")[1]
    
    game_data = await state.get_data()
    level = game_data.get('level', 1)
    current_pot = game_data.get('current_pot')
    initial_bet = game_data.get('initial_bet')
    
    level_config = COINFLIP_LEVELS.get(level)
    if not level_config:
        await callback.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ó–∞–±–∏—Ä–∞–π—Ç–µ –≤—ã–∏–≥—Ä—ã—à.", show_alert=True)
        await cashout_coinflip_handler(callback, state)
        return

    win_chance = level_config['chance']
    prize_mult = level_config['prize_mult']
    
    is_win = random.randint(1, 100) <= win_chance
    result = user_choice if is_win else ('tails' if user_choice == 'heads' else 'heads')
    result_emoji = 'ü¶Ö' if result == 'heads' else 'ü™ô'
    
    if is_win:
        new_pot = int(current_pot * prize_mult)
        await state.update_data(current_pot=new_pot, level=level + 1)
        
        next_level_chance = COINFLIP_LEVELS.get(level + 1, {}).get('chance', 0)
        
        text = f"–í—ã–ø–∞–ª {result_emoji}! **–í—ã —É–≥–∞–¥–∞–ª–∏!**\n\n–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–∂–µ <b>{new_pot} ‚≠ê</b>.\n\n–•–æ—Ç–∏—Ç–µ —Ä–∏—Å–∫–Ω—É—Ç—å –µ—â—ë —Ä–∞–∑? –®–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ: <b>{next_level_chance}%</b>"
        await callback.message.edit_caption(caption=text, reply_markup=coinflip_continue_keyboard(new_pot))
    else:
        await db.update_user_balance(callback.from_user.id, -initial_bet)
        text = f"–í—ã–ø–∞–ª {result_emoji}! **–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...**\n\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ <b>{initial_bet} ‚≠ê</b> —Å–≥–æ—Ä–µ–ª–∞."
        await state.clear()
        await callback.message.edit_caption(caption=text, reply_markup=coinflip_bet_keyboard())
        await callback.answer("–ù–µ –ø–æ–≤–µ–∑–ª–æ!", show_alert=True)

@router.callback_query(CoinflipGame.in_game, F.data == "coinflip_continue")
async def continue_coinflip_handler(callback: CallbackQuery, state: FSMContext):
    game_data = await state.get_data()
    level = game_data.get('level', 1)
    await callback.message.edit_caption(caption=f"–†–∏—Å–∫ ‚Äî –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–µ –¥–µ–ª–æ! –®–∞–Ω—Å —É–≥–∞–¥–∞—Ç—å: {COINFLIP_LEVELS[level]['chance']}%\n–ö—É–¥–∞ —É–ø–∞–¥—ë—Ç –º–æ–Ω–µ—Ç–∞?", reply_markup=coinflip_choice_keyboard())

@router.callback_query(CoinflipGame.in_game, F.data == "coinflip_cashout")
async def cashout_coinflip_handler(callback: CallbackQuery, state: FSMContext):
    game_data = await state.get_data()
    prize = game_data.get('current_pot', 0)
    initial_bet = game_data.get('initial_bet', 0)
    
    profit = prize - initial_bet
    await db.update_user_balance(callback.from_user.id, profit)
    
    await callback.answer(f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ {prize} ‚≠ê.", show_alert=True)
    await state.clear()
    await start_coinflip_handler(callback, state)

@router.callback_query(F.data == "game_coinflip_cancel")
async def cancel_coinflip_handler(callback: CallbackQuery, state: FSMContext):
    if await state.get_state() == CoinflipGame.in_game:
        game_data = await state.get_data()
        initial_bet = game_data.get('initial_bet', 0)
        await db.update_user_balance(callback.from_user.id, -initial_bet)
        await callback.answer(f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–≥—Ä—É –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ {initial_bet} ‚≠ê.", show_alert=True)
    
    await state.clear()
    await start_coinflip_handler(callback, state)


# --- –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
@router.callback_query(F.data == "achievements_menu")
async def achievements_menu_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await clean_junk_message(callback, state)
    user_id = callback.from_user.id
    all_ach = await db.get_all_achievements()
    user_ach = await db.get_user_achievements(user_id)
    text = "–í—ã–ø–æ–ª–Ω—è–π <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> –∏ –ø–æ–ª—É—á–∞–π –∂–∏—Ä–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! üèÜ"
    await callback.message.edit_media(
        media=InputMediaPhoto(media=PHOTO_ACHIEVEMENTS, caption=text),
        reply_markup=achievements_menu_keyboard(all_ach, user_ach, page=1)
    )

@router.callback_query(F.data.startswith("achievements_page:"))
async def achievements_page_handler(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    page = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    all_ach = await db.get_all_achievements()
    user_ach = await db.get_user_achievements(user_id)
    await callback.message.edit_reply_markup(
        reply_markup=achievements_menu_keyboard(all_ach, user_ach, page=page)
    )

# --- –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –ò–ì–† ---
@router.callback_query(F.data == "game_casino")
async def game_stubs_handler(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    await callback.answer("–°–∫–æ—Ä–æ... ü§´", show_alert=True)


@router.callback_query(F.data == "ignore_click")
async def ignore_click_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    await callback.answer("–≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –í—ã–ø–æ–ª–Ω—è–π —Ü–µ–ª–∏, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å!")