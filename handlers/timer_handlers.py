# handlers/timer_handlers.py
import asyncio
import logging
import random
import time
from collections import defaultdict
from dataclasses import dataclass, field

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from config import settings
from database import db
from handlers.utils import clean_junk_message
from keyboards.inline import (
    timer_finish_keyboard,
    timer_game_keyboard,
    timer_searching_keyboard,
    timer_stake_keyboard,
)
from lexicon.texts import LEXICON

router = Router()
logger = logging.getLogger(__name__)

timer_queue = defaultdict(dict)
active_timers = {}


@dataclass
class TimerMatch:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ '–¢–∞–π–º–µ—Ä'."""

    match_id: int
    p1_id: int
    p2_id: int
    stake: int
    target_time: float  # –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    start_time: float = 0.0  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
    p1_stopped_time: float = 0.0
    p2_stopped_time: float = 0.0
    lock: asyncio.Lock = field(default_factory=asyncio.Lock)


async def start_timer_game(bot: Bot, match_id: int, p1_id: int, p2_id: int, stake: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É: –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—É–Ω–¥."""
    target_time = random.uniform(2.5, 7.0)  # –ó–∞–≥–∞–¥—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç 2.5 –¥–æ 7 —Å–µ–∫—É–Ω–¥
    match = TimerMatch(match_id, p1_id, p2_id, stake, target_time)
    active_timers[match_id] = match

    try:
        p1 = await bot.get_chat(p1_id)
        p2 = await bot.get_chat(p2_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
        del active_timers[match_id]
        return

    p1_username = f"@{p1.username}" if p1.username else p1.full_name
    p2_username = f"@{p2.username}" if p2.username else p2.full_name

    text = LEXICON["timer_match_found"].format(
        p1_username=p1_username, p2_username=p2_username, stake=stake
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    p1_msg, p2_msg = await asyncio.gather(
        bot.send_message(p1_id, text + "\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å..."),
        bot.send_message(p2_id, text + "\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å..."),
    )

    await asyncio.sleep(random.uniform(2.5, 4.0))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
    match.start_time = time.time()
    await asyncio.gather(
        bot.edit_message_text(
            "üî¥ –ù–ê–ñ–ò–ú–ê–ô–¢–ï –°–¢–û–ü!",
            chat_id=p1_id,
            message_id=p1_msg.message_id,
            reply_markup=timer_game_keyboard(match_id),
        ),
        bot.edit_message_text(
            "üî¥ –ù–ê–ñ–ò–ú–ê–ô–¢–ï –°–¢–û–ü!",
            chat_id=p2_id,
            message_id=p2_msg.message_id,
            reply_markup=timer_game_keyboard(match_id),
        ),
    )


async def resolve_timer_game(bot: Bot, match_id: int):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    match = active_timers.get(match_id)
    if not match:
        return

    async with match.lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥
        if not (match.p1_stopped_time > 0 and match.p2_stopped_time > 0):
            return

        p1_elapsed = match.p1_stopped_time - match.start_time
        p2_elapsed = match.p2_stopped_time - match.start_time

        p1_diff = abs(p1_elapsed - match.target_time)
        p2_diff = abs(p2_elapsed - match.target_time)

        winner_id, loser_id, is_draw = None, None, False
        if p1_diff < p2_diff:
            winner_id, loser_id = match.p1_id, match.p2_id
        elif p2_diff < p1_diff:
            winner_id, loser_id = match.p2_id, match.p1_id
        else:
            is_draw = True

    bank = match.stake * 2
    rake = int(bank * (settings.DUEL_RAKE_PERCENT / 100))
    prize = bank - rake

    p1_result_text = f"{p1_elapsed:.3f} —Å–µ–∫. (–æ—Ç–ª–∏—á–∏–µ: {p1_diff:.3f})"
    p2_result_text = f"{p2_elapsed:.3f} —Å–µ–∫. (–æ—Ç–ª–∏—á–∏–µ: {p2_diff:.3f})"
    target_text = f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—ã–ª–æ: {match.target_time:.3f} —Å–µ–∫."

    if is_draw:
        await db.finish_timer_match(match_id, is_draw=True, new_bank=0)
        text = (
            LEXICON["timer_draw"].format(
                p1_result=p1_result_text, p2_result=p2_result_text
            )
            + f"\n\n{target_text}"
        )
        await asyncio.gather(
            bot.send_message(match.p1_id, text, reply_markup=timer_finish_keyboard()),
            bot.send_message(match.p2_id, text, reply_markup=timer_finish_keyboard()),
        )
    else:
        await db.finish_timer_match(match_id, winner_id=winner_id)
        winner_text = (
            LEXICON["timer_win_result"].format(
                p1_result=p1_result_text, p2_result=p2_result_text, prize=prize
            )
            + f"\n\n{target_text}"
        )
        loser_text = (
            LEXICON["timer_loss_result"].format(
                p1_result=p1_result_text, p2_result=p2_result_text
            )
            + f"\n\n{target_text}"
        )
        await bot.send_message(
            winner_id, winner_text, reply_markup=timer_finish_keyboard()
        )
        await bot.send_message(
            loser_id, loser_text, reply_markup=timer_finish_keyboard()
        )

    if match_id in active_timers:
        del active_timers[match_id]


@router.callback_query(F.data == "game_timer")
async def timer_menu_handler(callback: CallbackQuery, state: FSMContext):
    await clean_junk_message(callback, state)
    balance = await db.get_user_balance(callback.from_user.id)
    text = LEXICON["timer_menu"].format(balance=balance)
    await callback.message.edit_caption(
        caption=text, reply_markup=timer_stake_keyboard()
    )


@router.callback_query(F.data.startswith("timer_stake:"))
async def find_timer_handler(callback: CallbackQuery, bot: Bot):
    stake = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    balance = await db.get_user_balance(user_id)
    if balance < stake:
        return await callback.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –≤ {stake} ‚≠ê.", show_alert=True
        )

    if any(user_id in [m.p1_id, m.p2_id] for m in active_timers.values()):
        return await callback.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ.", show_alert=True)

    if user_id in timer_queue.get(stake, {}):
        return await callback.answer("–í—ã —É–∂–µ –∏—â–µ—Ç–µ –∏–≥—Ä—É.", show_alert=True)

    # –ò—â–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    if timer_queue.get(stake):
        opponent_id = list(timer_queue[stake].keys())[0]
        del timer_queue[stake][opponent_id]

        match_id = await db.create_timer_match(user_id, opponent_id, stake)
        if not match_id:
            # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ —É –∫–æ–≥–æ-—Ç–æ)
            await callback.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É: —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",
                show_alert=True,
            )
            # –ù—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            try:
                await bot.send_message(
                    opponent_id,
                    "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω: —É –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",
                )
            except Exception:
                pass
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –¥–ª—è –æ–±–æ–∏—Ö
        await start_timer_game(bot, match_id, user_id, opponent_id, stake)
        # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ
        try:
            await asyncio.gather(
                bot.delete_message(
                    chat_id=user_id, message_id=callback.message.message_id
                ),
                bot.delete_message(
                    chat_id=opponent_id, message_id=timer_queue[stake].get("msg_id")
                ),
            )
        except (TelegramBadRequest, KeyError):
            pass

    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        timer_queue[stake][user_id] = {"msg_id": callback.message.message_id}
        await callback.message.edit_caption(
            caption=f"üîé –ò—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å–æ —Å—Ç–∞–≤–∫–æ–π {stake} ‚≠ê...",
            reply_markup=timer_searching_keyboard(),
        )


@router.callback_query(F.data == "timer_cancel_search")
async def timer_cancel_search_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    for stake in timer_queue:
        if user_id in timer_queue[stake]:
            del timer_queue[stake][user_id]
            break
    await callback.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)
    await timer_menu_handler(callback, state)


@router.callback_query(F.data.startswith("timer_stop:"))
async def stop_timer_handler(callback: CallbackQuery, bot: Bot):
    match_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    match = active_timers.get(match_id)
    if not match:
        return await callback.answer(
            "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True
        )

    async with match.lock:
        player_role = "p1" if user_id == match.p1_id else "p2"

        if player_role == "p1" and match.p1_stopped_time > 0:
            return await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π —Ö–æ–¥.")
        if player_role == "p2" and match.p2_stopped_time > 0:
            return await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π —Ö–æ–¥.")

        stopped_time = time.time()
        if player_role == "p1":
            match.p1_stopped_time = stopped_time
        else:
            match.p2_stopped_time = stopped_time

    await callback.message.edit_text("‚úÖ –í–∞—à–µ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–æ! –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
    await resolve_timer_game(bot, match_id)
