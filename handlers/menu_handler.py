# plyusovp/maniacstarsbot/ManiacStarsBot-4df23ef8bd5b8766acddffe6bca30a128458c7a5/handlers/menu_handler.py

import logging
import time
from typing import Optional

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InputMediaPhoto, Message

from config import settings
from database import db
from handlers.utils import (
    clean_junk_message,
    escape_markdown_v1,
    generate_referral_link,
    get_safe_media,
    get_user_info_text,
    safe_delete,
    safe_edit_caption,
    safe_edit_media,
)
from keyboards.factories import AchievementCallback, MenuCallback
from keyboards.inline import (
    achievements_keyboard,
    back_to_achievements_keyboard,
    back_to_menu_keyboard,
    faq_keyboard,
    games_menu_keyboard,
    gifts_catalog_keyboard,
    language_settings_keyboard,
    main_menu_keyboard,
    profile_keyboard,
    resources_keyboard,
    settings_keyboard,
    terms_keyboard,
    top_users_keyboard,
)
from lexicon.languages import get_text

router = Router()
logger = logging.getLogger(__name__)


async def show_main_menu(
    bot: Bot,
    chat_id: int,
    message_id: Optional[int] = None,
    state: Optional[FSMContext] = None,
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    balance = await db.get_user_balance(chat_id)
    user_language = await db.get_user_language(chat_id)
    caption = get_text("main_menu", user_language, balance=balance)
    media = get_safe_media(settings.PHOTO_MAIN_MENU, caption)

    success = False
    if message_id is not None:
        # Try to edit the existing message
        success = await safe_edit_media(
            bot=bot,
            media=media,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=main_menu_keyboard(user_language),
        )

    if not success:
        # If editing fails, delete the old one and send a new one
        if message_id:
            await safe_delete(bot, chat_id, message_id)
        try:
            await bot.send_photo(
                chat_id=chat_id,
                photo=settings.PHOTO_MAIN_MENU,
                caption=caption,
                reply_markup=main_menu_keyboard(user_language),
            )
        except Exception as e:
            logger.error(f"Failed to send main menu photo: {e}")
            await bot.send_message(
                chat_id,
                caption,
                reply_markup=main_menu_keyboard(user_language),
            )

    # Always update the state to reflect the current view
    if state:
        await state.update_data(current_view="main_menu")


# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
@router.message(Command("menu"))
@router.message(F.text == "üìñ –ú–µ–Ω—é")
async def menu_handler(message: Message, state: FSMContext, bot: Bot):
    """Handler for the /menu command and 'üìñ –ú–µ–Ω—é' button."""
    if not message.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        message, message.from_user.id, message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    if message.chat.type == "private":
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Ç–µ–∫—Å—Ç), —á—Ç–æ–±—ã —á–∞—Ç –±—ã–ª —á–∏—â–µ
            await message.delete()
        except Exception as e:
            logger.warning(f"Could not delete message {message.message_id}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await show_main_menu(bot, message.chat.id, state=state)


# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –±–æ–Ω—É—Å–∞
@router.message(Command("bonus"))
@router.message(F.text == "üéÅ –ë–æ–Ω—É—Å")
async def bonus_handler(message: Message):
    """Handler for the /bonus command and 'üéÅ –ë–æ–Ω—É—Å' button."""
    if not message.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –±–æ–Ω—É—Å–∞
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        message, message.from_user.id, message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    result = await db.get_daily_bonus(message.from_user.id)
    status = result.get("status")
    if status == "success":
        reward = result.get("reward", 0)
        await message.answer(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} ‚≠ê –¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!")
    elif status == "wait":
        seconds = result.get("seconds_left", 0)
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        await message.answer(f"‚è≥ –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á {minutes} –º.")
    else:
        # –î–û–ë–ê–í–õ–ï–ù–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò
        logger.error(
            "Failed to get daily bonus for user %d via command. Status: %s, Result: %s",
            message.from_user.id,
            status,
            result,
        )
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(MenuCallback.filter(F.name == "main_menu"))
async def back_to_main_menu_handler(
    callback: CallbackQuery, state: FSMContext, bot: Bot
):
    """Central handler for all 'Back to main menu' buttons."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    data = await state.get_data()
    # Prevent re-editing if already on the main menu
    if data.get("current_view") == "main_menu":
        await callback.answer()
        return

    await state.clear()
    await clean_junk_message(state, bot)
    if callback.message:
        await show_main_menu(
            bot, callback.message.chat.id, callback.message.message_id, state
        )
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "profile"))
async def profile_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await clean_junk_message(state, bot)
    if callback.message:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π" –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å
        try:
            await db.grant_achievement(callback.from_user.id, "curious", bot)
        except Exception as e:
            logger.warning(
                f"Failed to grant curious achievement for user {callback.from_user.id}: {e}"
            )

        profile_text = await get_user_info_text(callback.from_user.id)
        media = InputMediaPhoto(media=settings.PHOTO_PROFILE, caption=profile_text)
        user_language = await db.get_user_language(callback.from_user.id)
        await bot.edit_message_media(
            media=media,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=profile_keyboard(user_language),
        )
        await state.update_data(current_view="profile")
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "earn_bread"))
async def referral_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await clean_junk_message(state, bot)
    if callback.message:
        referral_link = generate_referral_link(callback.from_user.id)
        referral_link_escaped = escape_markdown_v1(referral_link)
        referrals_count = await db.get_referrals_count(callback.from_user.id)
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É
        earned = referrals_count * settings.REFERRAL_BONUS

        user_language = await db.get_user_language(callback.from_user.id)
        text = get_text(
            "referral_menu",
            user_language,
            ref_link=referral_link_escaped,
            invited_count=referrals_count,
            ref_bonus=settings.REFERRAL_BONUS,
            earned=earned,
        )
        media = InputMediaPhoto(media=settings.PHOTO_EARN_STARS, caption=text)
        await bot.edit_message_media(
            media=media,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=back_to_menu_keyboard(user_language),
        )
        await state.update_data(current_view="earn_bread")
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "top_users"))
async def top_users_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await clean_junk_message(state, bot)
    if callback.message:
        top_users = await db.get_top_referrers()
        top_users_text = ""
        if top_users:
            for i, user in enumerate(top_users, 1):
                top_users_text += (
                    f"{i}. {user['full_name']} ‚Äî {user['ref_count']} üôã‚Äç‚ôÇÔ∏è\n"
                )
        else:
            top_users_text = "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–∑–µ–π."

        user_language = await db.get_user_language(callback.from_user.id)
        text = get_text("top_menu", user_language, top_users_text=top_users_text)
        media = InputMediaPhoto(media=settings.PHOTO_TOP, caption=text)
        await bot.edit_message_media(
            media=media,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=top_users_keyboard(user_language),
        )
        await state.update_data(current_view="top_users")
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "gifts"))
async def gifts_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await state.clear()
    await clean_junk_message(state, bot)
    if not callback.message:
        return await callback.answer()

    user_id = callback.from_user.id
    balance = await db.get_user_balance(user_id)
    referrals = await db.get_referrals_count(user_id)

    user_language = await db.get_user_language(user_id)
    text = get_text(
        "gifts_menu",
        user_language,
        balance=balance,
        min_refs=settings.MIN_REFERRALS_FOR_WITHDRAW,
        referrals_count=referrals,
    )
    media = InputMediaPhoto(media=settings.PHOTO_WITHDRAW, caption=text)

    await safe_edit_media(
        bot=bot,
        media=media,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=gifts_catalog_keyboard(user_language),
    )
    await state.update_data(current_view="gifts")
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "games"))
async def games_menu_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é '–ò–≥—Ä—ã'."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏–≥—Ä
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await state.clear()
    await clean_junk_message(state, bot)
    user_language = await db.get_user_language(callback.from_user.id)
    media = InputMediaPhoto(
        media=settings.PHOTO_GAMES_MENU, caption=get_text("games_menu", user_language)
    )
    if callback.message:
        await safe_edit_media(
            bot=bot,
            media=media,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=games_menu_keyboard(user_language),
        )
        await state.update_data(current_view="games")
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "resources"))
async def resources_menu_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é '–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã' —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã–≤–æ–¥–æ–≤."""
    await state.clear()
    await clean_junk_message(state, bot)

    if not callback.message:
        await callback.answer()
        return

    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    user_language = await db.get_user_language(callback.from_user.id)
    caption = get_text("resources_menu", user_language)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
    media = InputMediaPhoto(media=settings.PHOTO_RESOURCES, caption=caption)

    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_edit_media(
        bot=bot,
        media=media,
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=resources_keyboard(user_language),
    )

    await state.update_data(current_view="resources")
    await callback.answer()


# --- Game placeholder handlers ---
@router.callback_query(MenuCallback.filter(F.name == "placeholder_game"))
async def placeholder_game_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."""
    await callback.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!", show_alert=True)


@router.callback_query(MenuCallback.filter(F.name == "passive_income"))
async def passive_income_handler(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞."""
    if not callback.from_user:
        return

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    status = await db.get_passive_income_status(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –±–∏–æ
    has_link = await db.check_user_bio_for_bot_link(bot, user_id, settings.BOT_USERNAME)

    if has_link and not status["enabled"]:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
        await db.update_passive_income_status(user_id, True)
        text = (
            "üéâ **–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
            "üí∞ **–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:**\n"
            "‚Ä¢ 1 ‚≠ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "‚Ä¢ 30 ‚≠ê –≤ –º–µ—Å—è—Ü –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            "üîÑ –í—ã–¥–∞—á–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞\n"
            "üì© –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è!"
        )
    elif has_link and status["enabled"]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        current_time = int(time.time())
        last_income = status["last_income_time"]

        if last_income == 0:
            text = (
                "‚úÖ **–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!**\n\n"
                "üí∞ **–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã:**\n"
                "‚Ä¢ 1 ‚≠ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
                "‚Ä¢ 30 ‚≠ê –≤ –º–µ—Å—è—Ü –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                "üéÅ –ü–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
            )
        else:
            time_since_last = current_time - last_income
            if time_since_last >= 24 * 3600:
                text = (
                    "‚úÖ **–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!**\n\n"
                    "üí∞ **–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã:**\n"
                    "‚Ä¢ 1 ‚≠ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
                    "‚Ä¢ 30 ‚≠ê –≤ –º–µ—Å—è—Ü –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                    "üéÅ –ù–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ!"
                )
            else:
                hours_left = (24 * 3600 - time_since_last) // 3600
                minutes_left = ((24 * 3600 - time_since_last) % 3600) // 60
                text = (
                    "‚úÖ **–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!**\n\n"
                    "üí∞ **–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã:**\n"
                    "‚Ä¢ 1 ‚≠ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
                    "‚Ä¢ 30 ‚≠ê –≤ –º–µ—Å—è—Ü –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                    f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {hours_left}—á {minutes_left}–º"
                )
    else:
        # –°—Å—ã–ª–∫–∏ –Ω–µ—Ç –≤ bio –∏–ª–∏ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω
        text = (
            "üìà **–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥**\n\n"
            "üí∞ **–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:**\n"
            "‚Ä¢ 1 ‚≠ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "‚Ä¢ 30 ‚≠ê –≤ –º–µ—Å—è—Ü –ø–∞—Å—Å–∏–≤–Ω–æ\n\n"
            "üîó **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            f"–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n`t.me/{settings.BOT_USERNAME}`\n\n"
            "üìù **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
            "2. –ù–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª\n"
            "3. –í –ø–æ–ª–µ ¬´–û —Å–µ–±–µ¬ª –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n"
            "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞\n\n"
            "üîÑ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n"
            "üì© –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞–∂–¥–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
        )

    await callback.answer(text, show_alert=True)


@router.callback_query(MenuCallback.filter(F.name == "get_daily_bonus"))
async def get_daily_bonus_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –±–æ–Ω—É—Å–∞
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    result = await db.get_daily_bonus(callback.from_user.id)
    status = result.get("status")
    if status == "success":
        reward = result.get("reward", 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–æ–Ω—É—Å–∞–º–∏"
        try:
            await db.grant_achievement(
                callback.from_user.id, "bonus_hunter", callback.bot
            )
        except Exception as e:
            logger.warning(
                f"Failed to grant bonus_hunter achievement for user {callback.from_user.id}: {e}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å—Ç—Ä–∏–∫
        try:
            await db.check_streak_achievements(callback.from_user.id, callback.bot)
        except Exception as e:
            logger.warning(
                f"Failed to check streak achievements for user {callback.from_user.id}: {e}"
            )

        await callback.answer(
            f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} ‚≠ê –¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!", show_alert=True
        )
    elif status == "wait":
        seconds = result.get("seconds_left", 0)
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        await callback.answer(
            f"‚è≥ –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á {minutes} –º.", show_alert=True
        )
    else:
        # –î–û–ë–ê–í–õ–ï–ù–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò
        logger.error(
            "Failed to get daily bonus for user %d via callback. Status: %s, Result: %s",
            callback.from_user.id,
            status,
            result,
        )
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True
        )


# --- Achievements Section ---
@router.callback_query(MenuCallback.filter(F.name == "achievements"))
async def achievements_handler(
    callback: CallbackQuery, state: FSMContext, bot: Bot, callback_data: MenuCallback
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await clean_junk_message(state, bot)
    user_id = callback.from_user.id
    page = 1
    limit = 5

    all_achs = await db.get_all_achievements()
    user_achs_set = set(await db.get_user_achievements(user_id))

    total_pages = (len(all_achs) + limit - 1) // limit if all_achs else 1
    start_index = (page - 1) * limit
    end_index = start_index + limit
    current_page_achs = all_achs[start_index:end_index]

    text = f"üìú –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({len(user_achs_set)}/{len(all_achs)})"
    media = InputMediaPhoto(media=settings.PHOTO_ACHIEVEMENTS, caption=text)

    if callback.message:
        await safe_edit_media(
            bot=bot,
            media=media,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=achievements_keyboard(
                current_page_achs, user_achs_set, page, total_pages
            ),
        )
        await state.update_data(current_view="achievements")
    await callback.answer()


@router.callback_query(AchievementCallback.filter(F.action == "page"))
async def achievements_page_handler(
    callback: CallbackQuery, callback_data: AchievementCallback, bot: Bot
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö."""
    page = callback_data.page or 1
    limit = 5
    user_id = callback.from_user.id

    all_achs = await db.get_all_achievements()
    user_achs_set = set(await db.get_user_achievements(user_id))

    total_pages = (len(all_achs) + limit - 1) // limit if all_achs else 1
    start_index = (page - 1) * limit
    end_index = start_index + limit
    current_page_achs = all_achs[start_index:end_index]

    if callback.message:
        await callback.message.edit_reply_markup(
            reply_markup=achievements_keyboard(
                current_page_achs, user_achs_set, page, total_pages
            )
        )
    await callback.answer()


@router.callback_query(AchievementCallback.filter(F.action == "info"))
async def achievement_info_handler(
    callback: CallbackQuery,
    callback_data: AchievementCallback,
    bot: Bot,
    state: FSMContext,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏."""
    ach_id = callback_data.ach_id
    if not ach_id:
        return await callback.answer()
    details = await db.get_achievement_details(ach_id)
    if not details:
        await callback.answer("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user_achs_set = set(await db.get_user_achievements(callback.from_user.id))
    status = "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ" if ach_id in user_achs_set else "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ"

    text = (
        f"**{details['name']}** ({details['rarity']})\n\n"
        f"_{details['description']}_\n\n"
        f"**–ù–∞–≥—Ä–∞–¥–∞:** {details['reward']} ‚≠ê\n"
        f"**–°—Ç–∞—Ç—É—Å:** {status}"
    )
    if callback.message:
        await safe_edit_caption(
            bot=bot,
            caption=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=back_to_achievements_keyboard(),
        )
        await state.update_data(current_view="achievement_info")
    await callback.answer()


# --- Settings Handlers ---
@router.callback_query(MenuCallback.filter(F.name == "settings"))
async def settings_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await clean_junk_message(state, bot)
    user_language = await db.get_user_language(callback.from_user.id)
    text = get_text("settings_menu", user_language)

    if callback.message:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if callback.message.photo:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
            await safe_edit_caption(
                bot=bot,
                caption=text,
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                reply_markup=settings_keyboard(user_language),
            )
        else:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            await safe_delete(
                bot, callback.message.chat.id, callback.message.message_id
            )
            new_msg = await bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=settings.PHOTO_MAIN_MENU,
                caption=text,
                reply_markup=settings_keyboard(user_language),
            )
            await state.update_data(last_bot_message_id=new_msg.message_id)
        await state.update_data(current_view="settings")
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "faq"))
async def faq_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç FAQ."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º FAQ
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await clean_junk_message(state, bot)
    user_language = await db.get_user_language(callback.from_user.id)
    text = get_text("faq_menu", user_language)

    if callback.message:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await safe_delete(bot, callback.message.chat.id, callback.message.message_id)
        new_msg = await bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=faq_keyboard(user_language),
            parse_mode="HTML",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        )
        await state.update_data(
            current_view="faq", last_bot_message_id=new_msg.message_id
        )
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "terms"))
async def terms_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await clean_junk_message(state, bot)
    user_language = await db.get_user_language(callback.from_user.id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
    from datetime import datetime

    current_date = datetime.now().strftime("%d.%m.%Y")
    text = get_text("terms_of_service", user_language, current_date=current_date)

    if callback.message:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await safe_delete(bot, callback.message.chat.id, callback.message.message_id)
        new_msg = await bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=terms_keyboard(user_language),
            parse_mode="HTML",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        )
        await state.update_data(
            current_view="terms", last_bot_message_id=new_msg.message_id
        )
    await callback.answer()


@router.callback_query(MenuCallback.filter(F.name == "language_settings"))
async def language_settings_handler(
    callback: CallbackQuery, state: FSMContext, bot: Bot
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞."""
    if not callback.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    from handlers.subscription_checker import check_subscription_and_block

    if not await check_subscription_and_block(
        callback, callback.from_user.id, callback.message.chat.id
    ):
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await clean_junk_message(state, bot)
    user_language = await db.get_user_language(callback.from_user.id)
    text = get_text(
        "language_settings",
        user_language,
        default="üåç **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞** üåç\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
    )

    if callback.message:
        await safe_edit_caption(
            bot=bot,
            caption=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=language_settings_keyboard(user_language),
        )
        await state.update_data(current_view="language_settings")
    await callback.answer()
