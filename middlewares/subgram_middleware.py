"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SubGram API.
"""

import logging
from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery, Message, TelegramObject

from utils.subgram_api import check_user_subscription

logger = logging.getLogger(__name__)


class SubgramMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª.
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.
    """

    def __init__(self, enabled: bool = True):
        self.enabled = enabled
        super().__init__()

    def _get_chat_id(self, event: TelegramObject) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è."""
        if isinstance(event, Message):
            return event.chat.id
        elif isinstance(event, CallbackQuery):
            return event.message.chat.id if event.message else 0
        return 0

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not self.enabled:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not isinstance(data, dict):
            logger.error(f"–î–∞–Ω–Ω—ã–µ middleware –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(data)}")
            return await handler(event, data)

        user = data.get("event_from_user")
        if not user:
            return await handler(event, data)

        try:
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
            chat_id = self._get_chat_id(event)
            if not chat_id:
                return await handler(event, data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é API —Ñ—É–Ω–∫—Ü–∏—é
            subscription_result = await check_user_subscription(user.id, chat_id)

            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
            if subscription_result.get("success") and subscription_result.get(
                "subscribed", False
            ):
                return await handler(event, data)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            status = subscription_result.get("status")

            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "warning" –∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ - –∑–Ω–∞—á–∏—Ç SubGram —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
            if status == "warning" and not subscription_result.get("sponsors"):
                logger.info(
                    f"SubGram —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}"
                )
                return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, SubGram —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

            # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._handle_subscription_required(event, subscription_result)
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}"
            )
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            logger.warning(
                f"Subgram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}"
            )
            return await handler(event, data)

    async def _handle_subscription_required(
        self, event: TelegramObject, subscription_result: Dict[str, Any]
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ñ–æ—Ä–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        """
        message_text = ""

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        error_message = subscription_result.get(
            "message", "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
        )
        sponsors = subscription_result.get("sponsors", [])
        form = subscription_result.get("form")
        form_url = subscription_result.get("form_url")
        status = subscription_result.get("status")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        message_text += f"üîí {error_message}\n\n"

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "warning"
        if status == "warning":
            message_text += (
                "‚ö†Ô∏è *–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
            )
            message_text += "üìã *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
            message_text += "‚Ä¢ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ SubGram\n"
            message_text += "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            message_text += "‚Ä¢ –ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã\n\n"
            message_text += "üîó *–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞*\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if form_url:
            message_text += (
                f"üîó *–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã:*\n{form_url}\n\n"
            )
        elif form:
            message_text += f"üìã *–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∫–µ—Ç—ã:*\n{form}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        if sponsors:
            total_fixed_link = subscription_result.get("total_fixed_link", 0)
            requires_full_subscription = subscription_result.get(
                "requires_full_subscription", False
            )

            if requires_full_subscription:
                message_text += f"üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ({total_fixed_link} –∫–∞–Ω–∞–ª–æ–≤):*\n\n"
            else:
                message_text += "üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:*\n\n"

            for i, sponsor in enumerate(
                sponsors[:5], 1
            ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∫–∞–Ω–∞–ª–æ–≤
                title = sponsor.get("title", f"–ö–∞–Ω–∞–ª {i}")
                url = sponsor.get("url", "")
                required = sponsor.get("required", True)
                status_icon = "‚úÖ" if not required else "üî¥"

                if url:
                    message_text += f"{status_icon} {i}. *{title}*\n{url}\n\n"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—Ç–∞—Ç—É—Å warning
            if status != "warning":
                message_text += (
                    "üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è*\n\n"
                )

        message_text += (
            "‚úÖ *–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'*"
        )

        try:
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data="check_subscription",
                        )
                    ]
                ]
            )

            if isinstance(event, Message):
                await event.answer(
                    message_text, reply_markup=keyboard, parse_mode="Markdown"
                )
            elif isinstance(event, CallbackQuery):
                await event.message.edit_text(
                    message_text, reply_markup=keyboard, parse_mode="Markdown"
                )
                await event.answer()

        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
